Index: src/main/java/com/sprint/mission/discodeit/exception/InvalidRequestException.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/exception/InvalidRequestException.java b/src/main/java/com/sprint/mission/discodeit/exception/InvalidRequestException.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/exception/InvalidRequestException.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,12 +0,0 @@
-package com.sprint.mission.discodeit.exception;
-
-public class InvalidRequestException extends RuntimeException {
-    
-    public InvalidRequestException(String message) {
-        super(message);
-    }
-    
-    public InvalidRequestException(String field, String error) {
-        super(String.format("Invalid request: %s %s", field, error));
-    }
-}
Index: src/main/java/com/sprint/mission/discodeit/event/ChannelEventListener.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/ChannelEventListener.java b/src/main/java/com/sprint/mission/discodeit/event/ChannelEventListener.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/ChannelEventListener.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,120 +0,0 @@
-//package com.sprint.mission.discodeit.event;
-//
-//import com.sprint.mission.discodeit.entity.Channel;
-//import com.sprint.mission.discodeit.entity.User;
-//import com.sprint.mission.discodeit.entity.Message;
-//import com.sprint.mission.discodeit.entity.ReadStatus;
-//import com.sprint.mission.discodeit.service.*;
-//import lombok.RequiredArgsConstructor;
-////import lombok.extern.slf4j.Slf4j;
-////import org.springframework.context.event.EventListener;
-////import org.springframework.stereotype.Component;
-////
-////import java.util.List;
-////import java.util.Objects;
-////import java.util.Set;
-////import java.util.UUID;
-////import java.util.stream.Collectors;
-////
-////
-////public class ChannelEventListener {
-////    private final UserRepository userRepository;
-////    private final ChannelRepository channelRepository;
-////    private final MessageRepository messageRepository;
-////    private final BinaryContentRepository binaryContentRepository;
-////    private final ReadStatusRepository readStatusRepository;
-////
-////    @EventListener
-////    public void handleChannelDeletedEvent(ChannelDeletedEvent event) {
-////        UUID channelId = event.getChannelId();
-////        Channel channel=channelRepository.findChannelById(channelId).orElse(null);
-////        List<UUID> memberUserIds = Objects.requireNonNull(channel).getUserList().stream().toList();
-////
-////        log.info("채널 삭제 이벤트 처리: {}", channelId);
-////
-////        // 채널 멤버 사용자의 채널 목록에서 제거
-////        for (UUID userId : memberUserIds) {
-////            userRepository.findByUser(userId)
-////                    .ifPresent(user -> {
-////                        user.removeBelongChannel(channelId);
-////                        userRepository.updateUser(user);
-////                        log.debug("사용자 {}의 채널 목록에서 채널 {} 제거", userId, channelId);
-////                    });
-////        }
-////
-////        // 채널 관련 메시지 삭제
-////        List<Message> channelMessages = messageRepository.findAll().stream()
-////                .filter(msg -> msg.getChannelId().equals(channelId))
-////                .toList();
-////
-////        for (Message message : channelMessages) {
-////            messageRepository.deleteMessage(message.getId());
-////            log.debug("채널 {} 관련 메시지 {} 삭제", channelId, message.getId());
-////        }
-////
-////        // 채널 관련 바이너리 콘텐츠 삭제
-////        boolean binaryDeleted = binaryContentRepository.delete(channelId);
-////        log.debug("채널 {} 관련 바이너리 콘텐츠 삭제 결과: {}", channelId, binaryDeleted);
-////
-////        // 채널 관련 읽음 상태 삭제
-////        List<ReadStatus> channelReadStatuses = readStatusRepository.findAllByUserId(null).stream()
-////                .filter(status -> status.getChannelId().equals(channelId))
-////                .toList();
-////
-////        for (ReadStatus status : channelReadStatuses) {
-////            readStatusRepository.deleteReadStatus(status.getId());
-////            log.debug("채널 {} 관련 읽음 상태 {} 삭제", channelId, status.getId());
-////        }
-////
-////        // 채널 삭제 완료
-////        log.info("채널 {} 및 관련 데이터 삭제 완료", channelId);
-////    }
-////
-////    @EventListener
-////    public void handleUserJoinedChannelEvent(UserJoinedChannelEvent event) {
-////        UUID userId = event.getUserId();
-////        UUID channelId = event.getChannelId();
-////
-////        log.info("사용자 {} 채널 {} 참여 이벤트 처리", userId, channelId);
-////
-////        // 채널에 사용자 추가
-////        Channel channel = channelRepository.findChannelById(channelId).orElse(null);
-////        if (channel != null) {
-////            channel.joinChannel(userId);
-////            channelRepository.updateChannel(channel);
-////            log.debug("채널 {}에 사용자 {} 추가 완료", channelId, userId);
-////        }
-////
-////        // 사용자의 채널 목록에 추가
-////        User user = userRepository.findByUser(userId).orElse(null);
-////        if (user != null) {
-////            user.addBelongChannel(channelId);
-////            userRepository.updateUser(user);
-////            log.debug("사용자 {}의 채널 목록에 채널 {} 추가 완료", userId, channelId);
-////        }
-////    }
-////
-////    @EventListener
-////    public void handleUserLeftChannelEvent(UserLeftChannelEvent event) {
-////        UUID userId = event.getUserId();
-////        UUID channelId = event.getChannelId();
-////
-////        log.info("사용자 {} 채널 {} 탈퇴 이벤트 처리", userId, channelId);
-////
-////        // 채널에서 사용자 제거
-////        Channel channel = channelRepository.findChannelById(channelId).orElse(null);
-////        if (channel != null) {
-////            channel.leaveChannel(userId);
-////            channelRepository.updateChannel(channel);
-////            log.debug("채널 {}에서 사용자 {} 제거 완료", channelId, userId);
-////        }
-////
-////        // 사용자의 채널 목록에서 제거
-////        User user = userRepository.findByUser(userId).orElse(null);
-////        if (user != null) {
-////            user.removeBelongChannel(channelId);
-////            userRepository.updateUser(user);
-////            log.debug("사용자 {}의 채널 목록에서 채널 {} 제거 완료", userId, channelId);
-////        }
-////    }
-////}
Index: src/main/java/com/sprint/mission/discodeit/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/UserService.java b/src/main/java/com/sprint/mission/discodeit/service/UserService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/UserService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,27 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.common.ListSummary;
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.dto.UserDto.Summary;
-import org.springframework.stereotype.Component;
-
-import java.util.UUID;
-
-@Component//유저 CRUD
-public interface UserService {
-
-  Summary findByUserId(UUID id);
-
-  ListSummary<Summary> findByAllUsersId();
-
-  void deleteUser(UUID id);
-
-  UserDto.Response createdUser(UserDto.Create createUserDto);
-
-  //업데이트 권한에 대한 것은?
-  UserDto.Update updateUser(UUID userId, UserDto.Update updateUserDto);
-
-  boolean existsById(String userId);
-
-  void leaveChannel(UUID userId, UUID channelId);
-}
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicMessageService.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicMessageService.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicMessageService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicMessageService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,170 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl; // 서비스 구현체 패키지
-
-import com.sprint.mission.discodeit.util.UpdateOperation;
-import com.sprint.mission.discodeit.dto.BinaryContentDto;
-import com.sprint.mission.discodeit.dto.MessageDto;
-import com.sprint.mission.discodeit.entity.Channel;
-import com.sprint.mission.discodeit.entity.Message;
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.exception.ForbiddenException;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.mapping.MessageMapping;
-
-import com.sprint.mission.discodeit.service.*;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-import java.util.stream.Collectors;
-
-@RequiredArgsConstructor
-@Service
-public class BasicMessageService implements MessageService {
-
-  private final MessageRepository messageRepository;
-  private final ChannelRepository channelRepository;
-  private final UserRepository userRepository;
-  private final BinaryContentService binaryContentService;
-
-  @Override
-  public MessageDto.Response create(MessageDto.Create messageCreateDTO, UUID authorId) {
-    validateUserInChannel(messageCreateDTO.getChannelId(), authorId);
-
-    Message message = new Message(
-        messageCreateDTO.getChannelId(),
-        authorId,
-        messageCreateDTO.getMessage()
-    );
-    if (messageCreateDTO.getBinaryContents() != null && !messageCreateDTO.getBinaryContents()
-        .isEmpty()) {
-      validateAttachmentIdsExist(messageCreateDTO.getBinaryContents());
-      for (UUID fileId : messageCreateDTO.getBinaryContents()) {
-        message.addAttachment(fileId);
-      }
-    }
-
-    if (!messageRepository.register(message)) {
-      throw new RuntimeException("메시지 저장에 실패했습니다.");
-    }
-    return MessageMapping.INSTANCE.messageToResponse(message);
-
-
-  }
-
-
-  private void validateUserInChannel(UUID channelId, UUID userId) {
-    Channel channel = channelRepository.findById(channelId)
-        .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", channelId));
-    User user = userRepository.findByUser(userId)
-        .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-
-    boolean userInChannelList = channel.getUserList().contains(userId);
-    boolean channelInUserBelongs = user.getBelongChannels().contains(channelId);
-
-    if (!(userInChannelList && channelInUserBelongs)) {
-      throw new ForbiddenException("존재하지 않음");
-    }
-  }
-
-  private void validateAttachmentIdsExist(List<UUID> attachmentIds) {
-    if (attachmentIds == null || attachmentIds.isEmpty()) {
-      return;
-    }
-    List<BinaryContentDto.Summary> existingSummaries = binaryContentService.findBinaryContentSummariesByIds(
-        attachmentIds);
-
-    if (existingSummaries.size() != attachmentIds.size()) {
-      List<UUID> existingIds = existingSummaries.stream()
-          .map(summary -> UUID.fromString(String.valueOf(summary.getId())))
-          .toList();
-      List<UUID> nonExistentIds = new ArrayList<>(attachmentIds);
-      nonExistentIds.removeAll(existingIds);
-      throw new InvalidRequestException("attachments",
-          "존재하지 않는 첨부파일 ID가 포함되어 있습니다: " + nonExistentIds);
-    }
-  }
-
-  @Override
-  public MessageDto.Response findByMessage(UUID messageId) {
-    Message message = messageRepository.findById(messageId)
-        .orElseThrow(() -> new ResourceNotFoundException("Message", "id", messageId)); // 404
-
-    return MessageMapping.INSTANCE.messageToResponse(message);
-  }
-
-  @Override
-  public List<MessageDto.Response> findAllMessage() {
-    return messageRepository.findAll().stream()
-        .map(MessageMapping.INSTANCE::messageToResponse)
-        .collect(Collectors.toList());
-  }
-
-  @Override
-  public List<MessageDto.Response> findAllByChannelId(UUID channelId) {
-    channelRepository.findById(channelId)
-        .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", channelId)); // 404
-
-    List<Message> messages = messageRepository.findAllByChannelId(channelId);
-    return messages.stream()
-        .map(MessageMapping.INSTANCE::messageToResponse)
-        .collect(Collectors.toList());
-  }
-
-  @Override
-  public MessageDto.Response updateMessage(UUID messageId, MessageDto.Update messageUpdateDTO,
-      UUID uuid) {
-    Message message = messageRepository.findById(messageId)
-        .orElseThrow(() -> new ResourceNotFoundException("Message", "id", messageId));
-
-    if (messageUpdateDTO.getMessage() != null && !messageUpdateDTO.getMessage()
-        .equals(message.getMessage())) {
-      message.updateMessage(messageUpdateDTO.getMessage());
-    }
-    List<UUID> binaryContentIds = messageUpdateDTO.getBinaryContents();
-    UpdateOperation operation = messageUpdateDTO.getOperation();
-
-    if (operation != null && binaryContentIds != null && !binaryContentIds.isEmpty()) {
-
-      switch (operation) {
-        case add:
-          validateAttachmentIdsExist(binaryContentIds);
-          message.getAttachmentIds().addAll(binaryContentIds);
-          break;
-        case remove:
-          List<UUID> deleteList = new ArrayList<>(binaryContentIds);
-          deleteList.retainAll(message.getAttachmentIds());
-
-          if (!deleteList.isEmpty()) {
-            binaryContentService.deleteBinaryContentsByIds(deleteList);
-            deleteList.forEach(message.getAttachmentIds()::remove);
-          }
-          break;
-        default:
-          throw new InvalidRequestException("잘못된 요청");
-      }
-    }
-    message.setUpdateAt();
-
-    return MessageMapping.INSTANCE.messageToResponse(message);
-  }
-
-  @Override
-  public void deleteMessage(UUID messageId) {
-    Message message = messageRepository.findById(messageId)
-        .orElseThrow(() -> new ResourceNotFoundException("Message", "id", messageId));
-    if (message.getAttachmentIds().isEmpty()) {
-      messageRepository.deleteMessage(messageId);
-      return;
-    }
-    messageRepository.deleteMessage(messageId);
-    message.setUpdateAt();
-    List<UUID> attachmentIds = message.getAttachmentIds().stream().toList();
-    for (UUID attachmentId : attachmentIds) {
-      binaryContentService.deleteBinaryContentByOwner(attachmentId);
-    }
-
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/mapping/MessageMapping.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/mapping/MessageMapping.java b/src/main/java/com/sprint/mission/discodeit/mapping/MessageMapping.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/mapping/MessageMapping.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,24 +0,0 @@
-package com.sprint.mission.discodeit.mapping;
-
-
-import com.sprint.mission.discodeit.config.CentralMapperConfig;
-import com.sprint.mission.discodeit.dto.MessageDto;
-import com.sprint.mission.discodeit.entity.Message;
-import lombok.Getter;
-import org.mapstruct.BeanMapping;
-import org.mapstruct.Mapper;
-import org.mapstruct.MappingTarget;
-import org.mapstruct.NullValuePropertyMappingStrategy;
-import org.mapstruct.factory.Mappers;
-
-import java.util.*;
-
-@Mapper(config = CentralMapperConfig.class)
-public interface MessageMapping {
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  MessageDto.Response messageToResponse(Message message);
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  void updateMessageFromDto(MessageDto.Update messageDto, @MappingTarget Message message);
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/jwt/RequiresAuth.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/jwt/RequiresAuth.java b/src/main/java/com/sprint/mission/discodeit/jwt/RequiresAuth.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/jwt/RequiresAuth.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,11 +0,0 @@
-package com.sprint.mission.discodeit.jwt;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-@Target({ElementType.METHOD, ElementType.TYPE})
-@Retention(RetentionPolicy.RUNTIME)
-public @interface RequiresAuth {
-}
-
Index: src/main/java/com/sprint/mission/discodeit/file/FileChannelRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/file/FileChannelRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/file/FileChannelRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/file/FileChannelRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,124 +0,0 @@
-package com.sprint.mission.discodeit.file;
-
-import com.sprint.mission.discodeit.entity.Channel;
-import com.sprint.mission.discodeit.service.ChannelRepository;
-import jakarta.annotation.PreDestroy;
-import org.springframework.stereotype.Repository;
-
-import java.io.*;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-
-@Repository("fileChannelRepositoryImplement")
-public class FileChannelRepositoryImplement implements ChannelRepository {
-    private String dataDir;
-    private String channelDataFile;
-
-    private final Map<UUID, Channel> channelRepository;
-
-    public FileChannelRepositoryImplement() {
-        this.dataDir = "./data";
-        this.channelDataFile = "channels.dat";
-        channelRepository = loadData();
-    }
-
-    public FileChannelRepositoryImplement(String dataDir) {
-        this.dataDir = dataDir;
-        this.channelDataFile = "channels.dat";
-        channelRepository = loadData();
-    }
-
-    @SuppressWarnings("unchecked")
-    private Map<UUID, Channel> loadData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-
-        File file = new File(dir, channelDataFile);
-        System.out.println("채널 데이터 로드 경로: " + file.getAbsolutePath());
-
-        if (file.exists()) {
-            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
-                return (Map<UUID, Channel>) in.readObject();
-            } catch (IOException | ClassNotFoundException e) {
-                System.err.println("채널 데이터 로드 오류: " + e.getMessage());
-                return new ConcurrentHashMap<>();
-            }
-        }
-
-        return new ConcurrentHashMap<>();
-    }
-
-    private synchronized void saveData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-
-        File file = new File(dir, channelDataFile);
-        System.out.println("채널 데이터 저장 경로: " + file.getAbsolutePath());
-
-        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file))) {
-            out.writeObject(channelRepository);
-        } catch (IOException e) {
-            System.err.println("채널 데이터 저장 오류: " + e.getMessage());
-            throw new RuntimeException("채널 데이터 저장 실패", e);
-        }
-    }
-
-    @Override
-    public boolean register(Channel channel) {
-        channelRepository.put(channel.getChannelId(), channel);
-        saveData();
-        return true;
-    }
-
-    @Override
-    public Set<UUID> allChannelIdList() {
-        return new HashSet<>(channelRepository.keySet());
-    }
-
-    @Override
-    public Optional<Channel> findById(UUID channelId) {
-        return Optional.ofNullable(channelRepository.get(channelId));
-    }
-
-    @Override
-    public Optional<String> findChannelNameById(UUID channelId) {
-        return findById(channelId).map(Channel::getChannelName);
-    }
-
-    @Override
-    public Optional<Channel> findByName(String channelName) {
-        return channelRepository.values().stream()
-                .filter(channel -> channel.getChannelName() != null && channel.getChannelName().equals(channelName))
-                .findFirst();
-    }
-
-    @Override
-    public boolean deleteChannel(UUID channelId) {
-        boolean removed = channelRepository.remove(channelId) != null;
-        if (removed) {
-            saveData();
-        }
-        return removed;
-    }
-
-    @Override
-    public boolean updateChannel(Channel channel) {
-        if (channel == null || !channelRepository.containsKey(channel.getChannelId())) {
-            return false;
-        }
-        channelRepository.put(channel.getChannelId(), channel);
-        saveData();
-        return true;
-    }
-
-    // 애플리케이션 종료 시 데이터 저장 보장
-    @PreDestroy
-    public void saveDataOnShutdown() {
-        System.out.println("애플리케이션 종료 - 채널 데이터 저장 중");
-        saveData();
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/file/FileReadStatusRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/file/FileReadStatusRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/file/FileReadStatusRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/file/FileReadStatusRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,168 +0,0 @@
-package com.sprint.mission.discodeit.file;
-
-import com.sprint.mission.discodeit.entity.ReadStatus;
-import com.sprint.mission.discodeit.service.ReadStatusRepository;
-import org.springframework.stereotype.Repository;
-import jakarta.annotation.PreDestroy;
-
-import java.io.*;
-import java.util.*;
-import java.util.stream.Collectors;
-
-@Repository("fileReadStatusRepositoryImplement")
-public class FileReadStatusRepositoryImplement implements ReadStatusRepository {
-    private final Map<UUID, ReadStatus> readStatusRepository;
-    private String dataDir;
-    private String readStatusDataFile;
-
-    public FileReadStatusRepositoryImplement() {
-        this.dataDir = "./data";
-        this.readStatusDataFile = "read_status.dat";
-        readStatusRepository = loadData();
-    }
-
-    public FileReadStatusRepositoryImplement(String dataDir) {
-        this.dataDir = dataDir;
-        this.readStatusDataFile = "read_status.dat";
-        readStatusRepository = loadData();
-    }
-
-    @SuppressWarnings("unchecked")
-    private Map<UUID, ReadStatus> loadData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, readStatusDataFile);
-        System.out.println("읽기 상태 데이터 로드 경로: " + file.getAbsolutePath());
-        
-        if (file.exists()) {
-            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
-                return (Map<UUID, ReadStatus>) in.readObject();
-            } catch (IOException | ClassNotFoundException e) {
-                System.err.println("읽기 상태 데이터 로드 오류: " + e.getMessage());
-                return new HashMap<>();
-            }
-        }
-        
-        return new HashMap<>();
-    }
-
-    private synchronized void saveData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, readStatusDataFile);
-        System.out.println("읽기 상태 데이터 저장 경로: " + file.getAbsolutePath());
-        
-        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file))) {
-            out.writeObject(readStatusRepository);
-        } catch (IOException e) {
-            System.err.println("읽기 상태 데이터 저장 오류: " + e.getMessage());
-            throw new RuntimeException("읽기 상태 데이터 저장 실패", e);
-        }
-    }
-    
-    @Override
-    public boolean register(ReadStatus readStatus) {
-        readStatusRepository.put(readStatus.getId(), readStatus);
-        saveData();
-        return true;
-    }
-    
-    @Override
-    public Optional<ReadStatus> findById(UUID id) {
-        return Optional.ofNullable(readStatusRepository.get(id));
-    }
-    
-    @Override
-    public List<ReadStatus> findAllByUserId(UUID userId) {
-        return readStatusRepository.values().stream()
-                .filter(status -> status.getUserId().equals(userId))
-                .collect(Collectors.toList());
-    }
-    
-    @Override
-    public List<ReadStatus> findAll() {
-        return new ArrayList<>(readStatusRepository.values());
-    }
-    
-    @Override
-    public boolean updateReadStatus(ReadStatus readStatus) {
-        if (readStatus == null || !readStatusRepository.containsKey(readStatus.getId())) {
-            return false;
-        }
-        
-        readStatusRepository.put(readStatus.getId(), readStatus);
-        saveData();
-        return true;
-    }
-    
-    @Override
-    public boolean deleteReadStatus(UUID id) {
-        boolean removed = readStatusRepository.remove(id) != null;
-        if (removed) {
-            saveData();
-        }
-        return removed;
-    }
-    
-    @Override
-    public Optional<ReadStatus> findByUserIdAndChannelId(UUID userId, UUID channelId) {
-        return readStatusRepository.values().stream()
-                .filter(status -> status.getUserId().equals(userId) && status.getChannelId().equals(channelId))
-                .findFirst();
-    }
-    
-    public boolean deleteAllByUserId(UUID userId) {
-        boolean success = true;
-        List<ReadStatus> statusesToDelete = new ArrayList<>();
-        
-        // 먼저 삭제할 항목 수집
-        for (ReadStatus status : readStatusRepository.values()) {
-            if (userId.equals(status.getUserId())) {
-                statusesToDelete.add(status);
-            }
-        }
-        
-        // 삭제 실행
-        for (ReadStatus status : statusesToDelete) {
-            if (!deleteReadStatus(status.getId())) {
-                success = false;
-            }
-        }
-        
-        return success;
-    }
-    
-    @Override
-    public boolean deleteAllByChannelId(UUID channelId) {
-        boolean success = true;
-        List<ReadStatus> statusesToDelete = new ArrayList<>();
-        
-        // 먼저 삭제할 항목 수집
-        for (ReadStatus status : readStatusRepository.values()) {
-            if (channelId.equals(status.getChannelId())) {
-                statusesToDelete.add(status);
-            }
-        }
-        
-        // 삭제 실행
-        for (ReadStatus status : statusesToDelete) {
-            if (!deleteReadStatus(status.getId())) {
-                success = false;
-            }
-        }
-        
-        return success;
-    }
-
-    @PreDestroy
-    public void saveDataOnShutdown() {
-        System.out.println("애플리케이션 종료 - 읽기 상태 데이터 저장 중");
-        saveData();
-    }
-} 
\ No newline at end of file
Index: src/test/resources/application-test.properties
===================================================================
diff --git a/src/test/resources/application-test.properties b/src/test/resources/application-test.properties
deleted file mode 100644
--- a/src/test/resources/application-test.properties	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,2 +0,0 @@
-# 테스트 환경 설정
-spring.main.allow-bean-definition-overriding=true 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/controller/ChannelController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/controller/ChannelController.java b/src/main/java/com/sprint/mission/discodeit/controller/ChannelController.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/controller/ChannelController.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,80 +0,0 @@
-package com.sprint.mission.discodeit.controller;
-
-import com.sprint.mission.discodeit.dto.ChannelDto;
-import com.sprint.mission.discodeit.jwt.RequiresAuth;
-import com.sprint.mission.discodeit.service.ChannelService;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.validation.Valid;
-import java.util.List;
-import java.util.UUID;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.DeleteMapping;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.PutMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
-
-@RestController
-@RequestMapping("/channels")
-@RequiredArgsConstructor
-public class ChannelController {
-
-  private final ChannelService channelService;
-
-  @RequiresAuth
-  @PostMapping("/public")
-  public ResponseEntity<ChannelDto.Response> createPublicChannel(
-      @Valid @RequestBody ChannelDto.CreatePublic channelDto) {
-    return ResponseEntity.status(HttpStatus.CREATED)
-        .body(channelService.createPublicChannel(channelDto));
-  }
-
-  @RequiresAuth
-  @PostMapping("/private")
-  public ResponseEntity<ChannelDto.Response> createPrivateChannel(
-      @Valid @RequestBody ChannelDto.CreatePrivate channelDto) {
-    return ResponseEntity.status(HttpStatus.CREATED)
-        .body(channelService.createPrivateChannel(channelDto));
-  }
-
-  @RequiresAuth
-  @PutMapping("/{channelId}")
-  public ResponseEntity<ChannelDto.Response> updateChannel(
-      @Valid @PathVariable UUID channelId,
-      @Valid @RequestBody ChannelDto.Update channelDto) {
-
-    return ResponseEntity.ok(channelService.updateChannel(channelDto, channelId));
-  }
-
-  @RequiresAuth
-  @DeleteMapping("/{channelId}")
-  public ResponseEntity<Void> deleteChannel(
-      @Valid @PathVariable UUID channelId, HttpServletRequest httpRequest) {
-    String ownerId = (String) httpRequest.getAttribute("userId");
-    channelService.deleteChannel(channelId, UUID.fromString(ownerId));
-
-    return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
-
-  }
-
-  @GetMapping
-  public ResponseEntity<List<ChannelDto.Response>> getChannelsForUser(
-      @Valid @RequestParam("userId") UUID userId) {
-
-    List<ChannelDto.Response> channels = channelService.getAccessibleChannels(userId);
-    return ResponseEntity.ok(channels);
-  }
-
-  @GetMapping("/{channelId}")
-  public ResponseEntity<ChannelDto.Response> getChannel(@Valid @PathVariable UUID channelId) {
-
-    ChannelDto.Response channel = channelService.getChannelDetails(channelId);
-    return ResponseEntity.ok(channel);
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/common/Profile.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/Profile.java b/src/main/java/com/sprint/mission/discodeit/dto/common/Profile.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/Profile.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,15 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import java.util.*;
-import lombok.Builder;
-import lombok.Getter;
-
-@Getter
-@Builder(toBuilder = true)
-public class Profile {
-
-  private UUID profile;
-
-}
Index: src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicUserRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicUserRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicUserRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicUserRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,54 +0,0 @@
-package com.sprint.mission.discodeit.basic.repositoryimpl;
-
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.service.UserRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.*;
-
-
-public class BasicUserRepositoryImplement implements UserRepository {
-    private final Map<UUID, User> userRepository = new HashMap<>();
-
-    @Override
-    public Optional<User> findByUser(UUID userId) {
-        return Optional.ofNullable(userRepository.get(userId));
-    }
-
-    @Override
-    public boolean register(User user) {
-        userRepository.put(user.getId(), user);
-        return true;
-    }
-
-    @Override
-    public boolean deleteUser(UUID userId) {
-        return userRepository.remove(userId) != null;
-    }
-
-    @Override
-    public Set<UUID> findAllUsers() {
-        return new HashSet<>(userRepository.keySet());
-    }
-
-    @Override
-    public boolean updateUser(User user) {
-        if (userRepository.containsKey(user.getId())) {
-            userRepository.put(user.getId(), user);
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public Optional<User> findByEmail(String email) {
-        return userRepository.values().stream()
-                .filter(user -> user.getEmail() != null && user.getEmail().equals(email))
-                .findFirst();
-    }
-}
-
-
-
-
-
Index: src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/UserStatusRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/UserStatusRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/UserStatusRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/UserStatusRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,51 +0,0 @@
-package com.sprint.mission.discodeit.basic.repositoryimpl;
-
-import com.sprint.mission.discodeit.entity.UserStatus;
-import com.sprint.mission.discodeit.service.UserStatusRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.*;
-
-
-public class UserStatusRepositoryImplement implements UserStatusRepository {
-    private final Map<UUID, UserStatus> userStatuses = new HashMap<>();
-    
-    @Override
-    public boolean register(UserStatus userStatus) {
-        userStatuses.put(userStatus.getId(), userStatus);
-        return true;
-    }
-
-    // status 아이디로 찾기
-    @Override
-    public Optional<UserStatus> findById(UUID id) {
-        return Optional.ofNullable(userStatuses.get(id));
-    }
-    
-    // 유저 아이디로 찾기
-    @Override
-    public Optional<UserStatus> findByUserId(UUID userId) {
-        return userStatuses.values().stream()
-                .filter(userStatus -> userStatus.getUserId().equals(userId))
-                .findFirst();
-    }
-
-    @Override
-    public List<UserStatus> findAll() {
-        return new ArrayList<>(userStatuses.values());
-    }
-    
-    @Override
-    public boolean update(UserStatus userStatus) {
-        if (userStatuses.containsKey(userStatus.getId())) {
-            userStatuses.put(userStatus.getId(), userStatus);
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean delete(UUID id) {
-        return userStatuses.remove(id) != null;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/UserRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/UserRepository.java b/src/main/java/com/sprint/mission/discodeit/service/UserRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/UserRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,15 +0,0 @@
-package com.sprint.mission.discodeit.service;
-import com.sprint.mission.discodeit.entity.User;
-
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-
-public interface UserRepository {
-     Optional<User> findByUser(UUID userId);//조회
-     boolean register(User user);//저장
-     boolean deleteUser(UUID userId); //삭제
-     Set<UUID> findAllUsers(); //전체조회
-     boolean updateUser(User user);
-     Optional<User> findByEmail(String email);
-}
Index: src/main/java/com/sprint/mission/discodeit/jwt/JwtUtil.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/jwt/JwtUtil.java b/src/main/java/com/sprint/mission/discodeit/jwt/JwtUtil.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/jwt/JwtUtil.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,128 +0,0 @@
-package com.sprint.mission.discodeit.jwt;
-
-import io.jsonwebtoken.Claims;
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
-import io.jsonwebtoken.security.Keys;
-import io.jsonwebtoken.security.SignatureException; // 예외 추가
-import io.jsonwebtoken.ExpiredJwtException;      // 예외 추가
-import io.jsonwebtoken.MalformedJwtException;     // 예외 추가
-import jakarta.annotation.PostConstruct;          // PostConstruct 추가
-import org.slf4j.Logger;                       // 로거 추가
-import org.slf4j.LoggerFactory;                // 로거 추가
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Component;
-
-import javax.crypto.SecretKey; // Key 대신 SecretKey 사용 권장
-import java.nio.charset.StandardCharsets;
-import java.util.Base64;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.function.Function;
-
-@Component("jwtUtil")
-public class JwtUtil {
-
-    private static final Logger log = LoggerFactory.getLogger(JwtUtil.class); // 로거 추가
-
-    @Value("${jwt.secret}") // 설정 파일에서 비밀키 읽어오기
-    private String secretKeyString;
-
-    // 만료 시간도 설정 파일에서 읽어오려면 추가
-    // @Value("${jwt.expiration}")
-    // private long expirationTime;
-
-    private SecretKey key; // Key 타입 변경 및 final 제거
-
-    @PostConstruct
-    protected void init() {
-        log.info("Loaded jwt.secret from properties: '{}'", secretKeyString);
-        if (secretKeyString == null || secretKeyString.trim().isEmpty()) {
-            log.error("FATAL: jwt.secret is not configured properly in application properties!");
-            throw new IllegalStateException("jwt.secret configuration is missing or empty.");
-        }
-        byte[] keyBytes = secretKeyString.getBytes(StandardCharsets.UTF_8); // <-- Base64 디코딩 없음!
-        this.key = Keys.hmacShaKeyFor(keyBytes);
-        log.info("JWT Secret Key initialized from string.");
-        if (keyBytes.length * 8 < 256) {
-            log.warn("The configured JWT secret key's size is less than 256 bits...");
-        }
-    }
-    // 토큰에서 사용자 ID 추출
-    public String extractUserId(String token) {
-        return extractClaim(token, Claims::getSubject);
-    }
-
-    // 모든 클레임 추출 (예외 처리 추가)
-    public Claims extractAllClaims(String token) throws ExpiredJwtException, MalformedJwtException, SignatureException, IllegalArgumentException {
-        return Jwts.parserBuilder()
-                .setSigningKey(key) // 초기화된 key 사용
-                .build()
-                .parseClaimsJws(token)
-                .getBody();
-    }
-
-    // 특정 클레임 추출
-    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
-        final Claims claims = extractAllClaims(token);
-        return claimsResolver.apply(claims);
-    }
-
-    // 토큰 생성
-    public String generateToken(String userId) {
-        Map<String, Object> claims = new HashMap<>();
-        return createToken(claims, userId);
-    }
-
-    // 토큰 생성 (내부 메서드) - 만료 시간 설정 주의
-    private String createToken(Map<String, Object> claims, String subject) {
-        long now = System.currentTimeMillis();
-        // !!! 중요: 유효 기간을 적절하게 설정하세요 (예: 1시간, 1일) !!!
-        // long validity = expirationTime; // 설정 파일 값 사용 예시
-        long validity = 1000L * 60 * 60; // 예시: 1시간 (밀리초)
-
-        return Jwts.builder()
-                .setClaims(claims)
-                .setSubject(subject) // 사용자 ID 저장
-                .setIssuedAt(new Date(now))
-                .setExpiration(new Date(now + validity)) // 적절한 만료 시간 설정
-                .signWith(key, SignatureAlgorithm.HS256) // 알고리즘 명시 및 key 사용
-                .compact();
-    }
-
-    // 토큰 유효성 검증 (만료 + 서명 동시 확인)
-    public Boolean validateToken(String token) {
-        try {
-            extractAllClaims(token); // 파싱 시도 (서명, 만료 자동 확인)
-            return true;
-        } catch (SignatureException e) {
-            log.error("Invalid JWT signature: {}", e.getMessage());
-        } catch (MalformedJwtException e) {
-            log.error("Invalid JWT token: {}", e.getMessage());
-        } catch (ExpiredJwtException e) {
-            log.error("JWT token is expired: {}", e.getMessage());
-        } catch (IllegalArgumentException e) {
-            log.error("JWT claims string is empty: {}", e.getMessage());
-        } catch (Exception e) { // 그 외 예외 처리
-            log.error("Unexpected error during token validation: {}", e.getMessage());
-        }
-        return false;
-    }
-
-    // 토큰 만료 확인 (validateToken으로 대체 가능)
-    private Boolean isTokenExpired(String token) {
-        try {
-            return extractExpiration(token).before(new Date());
-        } catch (ExpiredJwtException e) {
-            return true; // 만료 예외 발생 시 만료된 것으로 간주
-        } catch (Exception e){
-            return true; // 다른 예외 발생 시 유효하지 않은 토큰으로 간주 (만료로 처리)
-        }
-    }
-
-    // 만료일 추출
-    private Date extractExpiration(String token) {
-        return extractClaim(token, Claims::getExpiration);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/exception/ForbiddenException.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/exception/ForbiddenException.java b/src/main/java/com/sprint/mission/discodeit/exception/ForbiddenException.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/exception/ForbiddenException.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,12 +0,0 @@
-package com.sprint.mission.discodeit.exception;
-
-public class ForbiddenException extends RuntimeException {
-    
-    public ForbiddenException(String message) {
-        super(message);
-    }
-    
-    public ForbiddenException(String resource, String action) {
-        super(String.format("You don't have permission to %s this %s", action, resource));
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/common/CompositeIdentifier.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/CompositeIdentifier.java b/src/main/java/com/sprint/mission/discodeit/dto/common/CompositeIdentifier.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/CompositeIdentifier.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import java.util.*;
-import lombok.Builder;
-import lombok.Getter;
-
-@Getter
-@Builder(toBuilder = true)
-public class CompositeIdentifier {
-
-  private final UUID id;
-  private final UUID ownerId;
-}
Index: src/main/java/com/sprint/mission/discodeit/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/controller/AuthController.java b/src/main/java/com/sprint/mission/discodeit/controller/AuthController.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/controller/AuthController.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,33 +0,0 @@
-package com.sprint.mission.discodeit.controller;
-
-import com.sprint.mission.discodeit.dto.LoginResponse;
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.service.AuthService;
-import com.sprint.mission.discodeit.service.UserService;
-import lombok.AllArgsConstructor;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-@RestController
-@RequestMapping("/auth")
-@AllArgsConstructor
-public class AuthController {
-
-  private final UserService userService;
-  private final AuthService authService;
-
-  @PostMapping("/register")
-  public ResponseEntity<UserDto.Response> registerUser(@RequestBody UserDto.Create userDto) {
-    return ResponseEntity.status(HttpStatus.CREATED).body(userService.createdUser(userDto));
-  }
-
-  @PostMapping("/login")
-  public ResponseEntity<LoginResponse> login(@RequestBody UserDto.Login loginDto) {
-    String token = authService.login(loginDto);
-    return ResponseEntity.ok(new LoginResponse(loginDto.getEmail(), "true", token));
-  }
-}
Index: src/main/java/com/sprint/mission/discodeit/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/controller/UserController.java b/src/main/java/com/sprint/mission/discodeit/controller/UserController.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/controller/UserController.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,64 +0,0 @@
-package com.sprint.mission.discodeit.controller;
-
-import com.sprint.mission.discodeit.dto.StatusDto;
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.dto.UserDto.Summary;
-import com.sprint.mission.discodeit.jwt.RequiresAuth;
-import com.sprint.mission.discodeit.service.UserService;
-import com.sprint.mission.discodeit.service.UserStatusService;
-import jakarta.validation.Valid;
-import java.util.List;
-import java.util.UUID;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.DeleteMapping;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PutMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-@RequiredArgsConstructor
-@RestController
-@RequestMapping("/users")
-public class UserController {
-
-  private final UserService userService;
-  private final UserStatusService userStatusService;
-
-  @GetMapping("/{userId}")
-  public ResponseEntity<Summary> findUser(@Valid @PathVariable("userId") UUID userId) {
-    return ResponseEntity.ok(userService.findByUserId(userId));
-  }
-
-  @GetMapping
-  public ResponseEntity<List<Summary>> findAllUsers() {
-    return ResponseEntity.ok((List<Summary>) userService.findByAllUsersId());
-  }
-
-  @RequiresAuth
-  @DeleteMapping("/{userId}")
-  public ResponseEntity<UserDto.DeleteResponse> deleteUser(
-      @Valid @PathVariable UUID userId) {
-
-    userService.deleteUser(userId);
-    return ResponseEntity.ok(new UserDto.DeleteResponse(userId.toString(), "true"));
-  }
-
-  @RequiresAuth
-  @PutMapping("/{userId}")
-  public ResponseEntity<UserDto.Update> updateUser(
-      @PathVariable UUID userId,
-      @Valid @RequestBody UserDto.Update updateDto) {
-
-    return ResponseEntity.ok(userService.updateUser(userId, updateDto));
-  }
-
-  @RequiresAuth
-  @PutMapping("{userId}/status")
-  public ResponseEntity<StatusDto.StatusResponse> updateUserStatus(
-      @Valid @PathVariable UUID userId, @RequestBody StatusDto.StatusRequest statusRequest) {
-    return ResponseEntity.ok(userStatusService.updateUserStatus(userId, statusRequest));
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/common/ListSummary.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/ListSummary.java b/src/main/java/com/sprint/mission/discodeit/dto/common/ListSummary.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/ListSummary.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,18 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import java.util.*;
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ListSummary<T> {
-
-  private List<T> data;
-
-  public ListSummary(List<T> data) {
-    this.data = data;
-  }
-}
-
-
Index: src/main/java/com/sprint/mission/discodeit/exception/ResourceNotFoundException.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/exception/ResourceNotFoundException.java b/src/main/java/com/sprint/mission/discodeit/exception/ResourceNotFoundException.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/exception/ResourceNotFoundException.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,12 +0,0 @@
-package com.sprint.mission.discodeit.exception;
-
-public class ResourceNotFoundException extends RuntimeException {
-    
-    public ResourceNotFoundException(String message) {
-        super(message);
-    }
-    
-    public ResourceNotFoundException(String resourceType, String fieldName, Object fieldValue) {
-        super(String.format("%s with %s : '%s' not found", resourceType, fieldName, fieldValue));
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/ReadStatusService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/ReadStatusService.java b/src/main/java/com/sprint/mission/discodeit/service/ReadStatusService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/ReadStatusService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,23 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.ReadStatusDto;
-
-
-import java.util.List;
-import java.util.UUID;
-
-
-public interface ReadStatusService {
-
-    ReadStatusDto.ResponseReadStatus create(ReadStatusDto.Create readStatusDto);
-    ReadStatusDto.ResponseReadStatus find(UUID id);
-    List<ReadStatusDto.ResponseReadStatus> findAllByUserId(UUID userId);
-    ReadStatusDto.ResponseReadStatus findByUserIdAndChannelId(UUID userId, UUID channelId);
-
-    ReadStatusDto.ResponseReadStatus update(UUID readStatusId, ReadStatusDto.Update updateDto);
-
-    boolean delete(UUID id);
-    boolean deleteAllByUserId(UUID userId);
-    boolean deleteAllByChannelId(UUID channelId);
-    Integer getUnreadMessageCount(UUID userId, UUID channelId);
-}
Index: src/main/java/com/sprint/mission/discodeit/util/UpdateOperation.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/util/UpdateOperation.java b/src/main/java/com/sprint/mission/discodeit/util/UpdateOperation.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/util/UpdateOperation.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,5 +0,0 @@
-package com.sprint.mission.discodeit.util;
-
-public enum UpdateOperation {
-    add,remove
-}
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicReadStatusService.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicReadStatusService.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicReadStatusService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicReadStatusService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,148 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl;
-
-import com.sprint.mission.discodeit.dto.ReadStatusDto;
-import com.sprint.mission.discodeit.entity.Message;
-import com.sprint.mission.discodeit.entity.ReadStatus;
-import com.sprint.mission.discodeit.exception.DataConflictException;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.mapping.ReadStatusMapping;
-import com.sprint.mission.discodeit.service.ChannelRepository;
-import com.sprint.mission.discodeit.service.MessageRepository;
-import com.sprint.mission.discodeit.service.ReadStatusRepository;
-import com.sprint.mission.discodeit.service.ReadStatusService;
-import com.sprint.mission.discodeit.service.UserRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-import java.util.List;
-import java.util.UUID;
-import java.util.stream.Collectors;
-@RequiredArgsConstructor
-@Service("basicReadStatusService")
-public class BasicReadStatusService implements ReadStatusService {
-    private final ReadStatusRepository readStatusRepository;
-    private final UserRepository userRepository;
-    private final ChannelRepository channelRepository;
-    private final MessageRepository messageRepository;
-
-    @Override
-    public ReadStatusDto.ResponseReadStatus create(ReadStatusDto.Create readStatusDto) {
-        validateUserAndChannel(readStatusDto.getUserId(), readStatusDto.getChannelId());
-
-        readStatusRepository.findByUserIdAndChannelId(readStatusDto.getUserId(), readStatusDto.getChannelId())
-                .ifPresent(existing -> {
-                    throw new DataConflictException("ReceptionStatus", "userId/channelId",
-                            readStatusDto.getUserId() + "/" + readStatusDto.getChannelId());
-                });
-
-       ReadStatus readStatus =ReadStatusMapping.INSTANCE.createDtoToEntity(readStatusDto);
-
-        boolean success = readStatusRepository.register(readStatus);
-        if (!success) {
-            throw new InvalidRequestException("reception_status", "수신 상태 저장에 실패했습니다");
-        }
-
-        return ReadStatusMapping.INSTANCE.toResponseDto(readStatus);
-    }
-
-    @Override
-    public ReadStatusDto.ResponseReadStatus find(UUID id) {
-        ReadStatus readStatus = readStatusRepository.findById(id)
-                .orElseThrow(() -> new ResourceNotFoundException("ReadStatus", "id", id));
-        
-        return ReadStatusMapping.INSTANCE.toResponseDto(readStatus);
-    }
-
-    @Override
-    public List<ReadStatusDto.ResponseReadStatus> findAllByUserId(UUID userId) {
-        // 사용자 존재 확인
-        userRepository.findByUser(userId)
-                .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-        
-        return readStatusRepository.findAllByUserId(userId).stream()
-                .map(ReadStatusMapping.INSTANCE::toResponseDto)
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public ReadStatusDto.ResponseReadStatus findByUserIdAndChannelId(UUID userId, UUID channelId) {
-        validateUserAndChannel(userId, channelId);
-        
-        ReadStatus readStatus = readStatusRepository.findByUserIdAndChannelId(userId, channelId)
-                .orElseThrow(() -> new ResourceNotFoundException("ReadStatus", "userId/channelId", 
-                        userId + "/" + channelId));
-        
-        return ReadStatusMapping.INSTANCE.toResponseDto(readStatus);
-    }
-
-    @Override
-    public ReadStatusDto.ResponseReadStatus update(UUID readStatusId, ReadStatusDto.Update updateDto) {
-        ReadStatus readStatus = readStatusRepository.findById(readStatusId)
-                .orElseThrow(() -> new ResourceNotFoundException("ReceptionStatus", "id", readStatusId));
-
-        messageRepository.findById(updateDto.getLastReadMessageId())
-                .orElseThrow(() -> new ResourceNotFoundException("Message", "id", updateDto.getLastReadMessageId()));
-
-        readStatus.updateLastReadMessage(updateDto.getLastReadMessageId());
-
-        boolean success = readStatusRepository.updateReadStatus(readStatus);
-        if (!success) {
-            throw new InvalidRequestException("reception_status", "수신 상태 업데이트에 실패했습니다");
-        }
-        return ReadStatusMapping.INSTANCE.toResponseDto(readStatus);
-    }
-
-    @Override
-    public boolean delete(UUID id) {
-
-        return readStatusRepository.deleteReadStatus(id);
-    }
-    
-    @Override
-    public boolean deleteAllByUserId(UUID userId) {
-        return readStatusRepository.deleteAllByUserId(userId);
-    }
-    
-    @Override
-    public boolean deleteAllByChannelId(UUID channelId) {
-        // 채널 존재 확인
-        channelRepository.findById(channelId)
-                .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", channelId));
-        
-        return readStatusRepository.deleteAllByChannelId(channelId);
-    }
-    
-    @Override
-    public Integer getUnreadMessageCount(UUID userId, UUID channelId) {
-        validateUserAndChannel(userId, channelId);
-
-        ReadStatus readStatus = readStatusRepository.findByUserIdAndChannelId(userId, channelId)
-                .orElse(null);
-        
-        //없을 시 메세지 수 반환
-        if (readStatus == null) {
-            return (int) messageRepository.findAll()
-                    .stream()
-                    .filter(m -> m.getChannelId().equals(channelId))
-                    .count();
-        }
-
-        // 마지막으로 읽은 메시지 ID 이후의 메시지 수 조회
-        List<Message> allMessages = messageRepository.findAll()
-                .stream()
-                .filter(msg -> msg.getChannelId().equals(channelId))
-                .filter(msg -> msg.getCreatedAt().isAfter(readStatus.getLastReadAt()))
-                .toList();
-
-        return allMessages.size();
-    }
-
-    // 검증 로직
-    private void validateUserAndChannel(UUID userId, UUID channelId) {
-        userRepository.findByUser(userId)
-                .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-
-        channelRepository.findById(channelId)
-                .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", channelId));
-    }
-}
Index: src/main/java/com/sprint/mission/discodeit/config/WebConfig.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/config/WebConfig.java b/src/main/java/com/sprint/mission/discodeit/config/WebConfig.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/config/WebConfig.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,34 +0,0 @@
-package com.sprint.mission.discodeit.config;
-
-import com.sprint.mission.discodeit.jwt.JwtAuthInterceptor;
-import lombok.NonNull;
-import org.springframework.beans.factory.annotation.Autowired; // Autowired 추가 (또는 생성자 주입 유지)
-import org.springframework.context.annotation.Configuration;
-import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
-
-@Configuration
-public class WebConfig implements WebMvcConfigurer {
-
-    private final JwtAuthInterceptor jwtAuthInterceptor;
-
-    @Autowired // 또는 생성자 주입 그대로 사용
-    public WebConfig(JwtAuthInterceptor jwtAuthInterceptor) {
-        this.jwtAuthInterceptor = jwtAuthInterceptor;
-    }
-
-    @Override
-    public void addInterceptors(@NonNull InterceptorRegistry registry) {
-        registry.addInterceptor(jwtAuthInterceptor)
-                .addPathPatterns(
-                        "/user/**",
-                        "/channel/**",   // <--- 수정: /** 추가
-                        "/message/**",   // <--- 수정: /** 추가
-                        "/binary-contents/**", // <--- 수정: /** 추가
-                        "/api/**",
-                        "read-status/**"// 기존 '/api/**'도 필요하다면 유지
-                )  // 기존 '/api/**'도 필요하다면 유지
-                .excludePathPatterns("/auth/login", "/auth/register"); // 로그인, 회원가입은 제외
-        // 다른 필요한 경로 패턴 추가/제외 가능
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/controller/MessageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/controller/MessageController.java b/src/main/java/com/sprint/mission/discodeit/controller/MessageController.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/controller/MessageController.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,78 +0,0 @@
-package com.sprint.mission.discodeit.controller;
-
-import com.sprint.mission.discodeit.dto.MessageDto;
-import com.sprint.mission.discodeit.jwt.RequiresAuth;
-import com.sprint.mission.discodeit.service.MessageService;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.validation.Valid;
-import java.io.IOException;
-import java.util.List;
-import java.util.UUID;
-import lombok.AllArgsConstructor;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.DeleteMapping;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.PutMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RestController;
-
-@AllArgsConstructor
-@RestController
-@RequestMapping("/messages")
-public class MessageController {
-
-  private final MessageService messageService;
-
-  @RequiresAuth
-  @PostMapping
-  public ResponseEntity<MessageDto.Response> sendMessage(
-      @RequestBody MessageDto.Create createMessage, HttpServletRequest httpRequest)
-      throws IOException {
-    String authorId = (String) httpRequest.getAttribute("userId");
-    return ResponseEntity.status(HttpStatus.CREATED).body(
-        messageService.create(createMessage, UUID.fromString(authorId)));
-  }
-
-  @RequiresAuth
-  @PutMapping("/{messageId}")
-  public ResponseEntity<MessageDto.Response> updateMessage(
-      @Valid @PathVariable UUID messageId,
-      @Valid @RequestBody MessageDto.Update updateMessage,
-      HttpServletRequest httpRequest) throws IOException {
-    String authorId = (String) httpRequest.getAttribute("userId");
-    MessageDto.Response updatedMessage = messageService.updateMessage(messageId, updateMessage,
-        UUID.fromString(authorId));
-    return ResponseEntity.ok(updatedMessage);
-  }
-
-  @RequiresAuth
-  @DeleteMapping("/{messageId}")
-  public ResponseEntity<Void> deleteMessage(@Valid @PathVariable UUID messageId) {
-    boolean deleted = messageService.deleteMessage(messageId);
-    if (deleted) {
-      return ResponseEntity.noContent().build();
-    } else {
-      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
-    }
-  }
-
-  @GetMapping
-  public ResponseEntity<List<MessageDto.Response>> getChannelMessages(
-      @Valid @RequestParam("channelId") UUID channelId) {
-
-    List<MessageDto.Response> messages = messageService.findAllByChannelId(channelId);
-    return ResponseEntity.ok(messages);
-  }
-
-  @GetMapping("/{messageId}")
-  public ResponseEntity<MessageDto.Response> getMessage(@PathVariable UUID messageId) {
-
-    MessageDto.Response message = messageService.findByMessage(messageId);
-    return ResponseEntity.ok(message);
-  }
-}
Index: src/main/java/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties b/src/main/java/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,7 +0,0 @@
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
-networkTimeout=10000
-validateDistributionUrl=true
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
Index: src/main/java/com/sprint/mission/discodeit/service/MessageRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/MessageRepository.java b/src/main/java/com/sprint/mission/discodeit/service/MessageRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/MessageRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,17 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.entity.Message;
-
-import java.util.List;
-import java.util.Optional;
-import java.util.UUID;
-
-public interface MessageRepository {
-    boolean register(Message message);
-    Optional<Message> findById(UUID id);
-    List<Message> findAll();
-    List<Message> findAllByChannelId(UUID channelId);
-    List<Message> findAllByAuthorId(UUID authorId);
-    boolean updateMessage(Message message);
-    boolean deleteMessage(UUID id);
-}
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
deleted file mode 100644
--- a/README.md	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,2 +0,0 @@
-# 2-sprint-mission
-2기 스프린트 미션 제출 리포지토리입니다.
Index: src/main/java/com/sprint/mission/discodeit/dto/common/UserChannels.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/UserChannels.java b/src/main/java/com/sprint/mission/discodeit/dto/common/UserChannels.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/UserChannels.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,15 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import java.util.*;
-import lombok.Builder;
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-@Builder(toBuilder = true)
-public class UserChannels {
-
-  private Set<UUID> belongChannels;
-}
-
Index: src/main/java/com/sprint/mission/discodeit/event/BinaryContentsDeleteEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/BinaryContentsDeleteEvent.java b/src/main/java/com/sprint/mission/discodeit/event/BinaryContentsDeleteEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/BinaryContentsDeleteEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,14 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-
-import java.util.*;
-
-@Getter
-public class BinaryContentsDeleteEvent {
-    private final List<UUID> attachmentIds;
-
-    public BinaryContentsDeleteEvent(List<UUID> attachmentIds) {
-        this.attachmentIds = attachmentIds;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/BinaryContentRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/BinaryContentRepository.java b/src/main/java/com/sprint/mission/discodeit/service/BinaryContentRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/BinaryContentRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,19 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.entity.BinaryContent;
-
-import java.util.List;
-import java.util.Optional;
-import java.util.UUID;
-
-public interface BinaryContentRepository {
-    boolean register(BinaryContent binaryContent);
-    Optional<BinaryContent> findById(UUID id);
-    boolean update(BinaryContent binaryContent);
-    boolean delete(BinaryContent binaryContent);
-    List<UUID> findAll();
-    List<BinaryContent> findAllByOwnerId(UUID ownerId);
-    boolean delete(UUID userId);
-
-    Optional<BinaryContent> findByOwnerId(UUID ownerId);
-}
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
deleted file mode 100644
--- a/gradlew	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,252 +0,0 @@
-#!/bin/sh
-
-#
-# Copyright © 2015-2021 the original authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      https://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# SPDX-License-Identifier: Apache-2.0
-#
-
-##############################################################################
-#
-#   Gradle start up script for POSIX generated by Gradle.
-#
-#   Important for running:
-#
-#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
-#       noncompliant, but you have some other compliant shell such as ksh or
-#       bash, then to run this script, type that shell name before the whole
-#       command line, like:
-#
-#           ksh Gradle
-#
-#       Busybox and similar reduced shells will NOT work, because this script
-#       requires all of these POSIX shell features:
-#         * functions;
-#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
-#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
-#         * compound commands having a testable exit status, especially «case»;
-#         * various built-in commands including «command», «set», and «ulimit».
-#
-#   Important for patching:
-#
-#   (2) This script targets any POSIX shell, so it avoids extensions provided
-#       by Bash, Ksh, etc; in particular arrays are avoided.
-#
-#       The "traditional" practice of packing multiple parameters into a
-#       space-separated string is a well documented source of bugs and security
-#       problems, so this is (mostly) avoided, by progressively accumulating
-#       options in "$@", and eventually passing that to Java.
-#
-#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
-#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
-#       see the in-line comments for details.
-#
-#       There are tweaks for specific operating systems such as AIX, CygWin,
-#       Darwin, MinGW, and NonStop.
-#
-#   (3) This script is generated from the Groovy template
-#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
-#       within the Gradle project.
-#
-#       You can find Gradle at https://github.com/gradle/gradle/.
-#
-##############################################################################
-
-# Attempt to set APP_HOME
-
-# Resolve links: $0 may be a link
-app_path=$0
-
-# Need this for daisy-chained symlinks.
-while
-    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
-    [ -h "$app_path" ]
-do
-    ls=$( ls -ld "$app_path" )
-    link=${ls#*' -> '}
-    case $link in             #(
-      /*)   app_path=$link ;; #(
-      *)    app_path=$APP_HOME$link ;;
-    esac
-done
-
-# This is normally unused
-# shellcheck disable=SC2034
-APP_BASE_NAME=${0##*/}
-# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
-APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
-' "$PWD" ) || exit
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD=maximum
-
-warn () {
-    echo "$*"
-} >&2
-
-die () {
-    echo
-    echo "$*"
-    echo
-    exit 1
-} >&2
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-nonstop=false
-case "$( uname )" in                #(
-  CYGWIN* )         cygwin=true  ;; #(
-  Darwin* )         darwin=true  ;; #(
-  MSYS* | MINGW* )  msys=true    ;; #(
-  NONSTOP* )        nonstop=true ;;
-esac
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD=$JAVA_HOME/jre/sh/java
-    else
-        JAVACMD=$JAVA_HOME/bin/java
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD=java
-    if ! command -v java >/dev/null 2>&1
-    then
-        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-fi
-
-# Increase the maximum file descriptors if we can.
-if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
-    case $MAX_FD in #(
-      max*)
-        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
-        # shellcheck disable=SC2039,SC3045
-        MAX_FD=$( ulimit -H -n ) ||
-            warn "Could not query maximum file descriptor limit"
-    esac
-    case $MAX_FD in  #(
-      '' | soft) :;; #(
-      *)
-        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
-        # shellcheck disable=SC2039,SC3045
-        ulimit -n "$MAX_FD" ||
-            warn "Could not set maximum file descriptor limit to $MAX_FD"
-    esac
-fi
-
-# Collect all arguments for the java command, stacking in reverse order:
-#   * args from the command line
-#   * the main class name
-#   * -classpath
-#   * -D...appname settings
-#   * --module-path (only if needed)
-#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
-
-# For Cygwin or MSYS, switch paths to Windows format before running java
-if "$cygwin" || "$msys" ; then
-    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
-    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
-
-    JAVACMD=$( cygpath --unix "$JAVACMD" )
-
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    for arg do
-        if
-            case $arg in                                #(
-              -*)   false ;;                            # don't mess with options #(
-              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
-                    [ -e "$t" ] ;;                      #(
-              *)    false ;;
-            esac
-        then
-            arg=$( cygpath --path --ignore --mixed "$arg" )
-        fi
-        # Roll the args list around exactly as many times as the number of
-        # args, so each arg winds up back in the position where it started, but
-        # possibly modified.
-        #
-        # NB: a `for` loop captures its iteration list before it begins, so
-        # changing the positional parameters here affects neither the number of
-        # iterations, nor the values presented in `arg`.
-        shift                   # remove old arg
-        set -- "$@" "$arg"      # push replacement arg
-    done
-fi
-
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
-
-# Collect all arguments for the java command:
-#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
-#     and any embedded shellness will be escaped.
-#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
-#     treated as '${Hostname}' itself on the command line.
-
-set -- \
-        "-Dorg.gradle.appname=$APP_BASE_NAME" \
-        -classpath "$CLASSPATH" \
-        org.gradle.wrapper.GradleWrapperMain \
-        "$@"
-
-# Stop when "xargs" is not available.
-if ! command -v xargs >/dev/null 2>&1
-then
-    die "xargs is not available"
-fi
-
-# Use "xargs" to parse quoted args.
-#
-# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
-#
-# In Bash we could simply go:
-#
-#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
-#   set -- "${ARGS[@]}" "$@"
-#
-# but POSIX shell has neither arrays nor command substitution, so instead we
-# post-process each arg (as a line of input to sed) to backslash-escape any
-# character that might be a shell metacharacter, then use eval to reverse
-# that process (while maintaining the separation between arguments), and wrap
-# the whole thing up as a single "set" statement.
-#
-# This will of course break if any of these variables contains a newline or
-# an unmatched quote.
-#
-
-eval "set -- $(
-        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
-        xargs -n1 |
-        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
-        tr '\n' ' '
-    )" '"$@"'
-
-exec "$JAVACMD" "$@"
Index: src/main/java/com/sprint/mission/discodeit/dto/common/FileMetadata.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/FileMetadata.java b/src/main/java/com/sprint/mission/discodeit/dto/common/FileMetadata.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/FileMetadata.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,20 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import jakarta.validation.constraints.NotBlank;
-import java.util.*;
-import lombok.Builder;
-import lombok.Getter;
-
-@Builder
-@Getter
-public class FileMetadata {
-
-  @NotBlank
-  private String ownerType;
-  @NotBlank
-  private Long size;
-  @NotBlank
-  private String fileName;
-  @NotBlank
-  private String contentType;
-}
Index: src/main/java/com/sprint/mission/discodeit/entity/ReadStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/entity/ReadStatus.java b/src/main/java/com/sprint/mission/discodeit/entity/ReadStatus.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/entity/ReadStatus.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,45 +0,0 @@
-package com.sprint.mission.discodeit.entity;
-
-import lombok.Getter;
-import org.springframework.boot.autoconfigure.domain.EntityScan;
-
-import java.io.Serial;
-import java.io.Serializable;
-import java.time.ZonedDateTime;
-import java.util.UUID;
-
-
-@Getter
-public class ReadStatus implements Serializable {
-
-  @Serial
-  private static final long serialVersionUID = 1L;
-
-  private final UUID id;
-  private final UUID channelId; // 채널
-  private final UUID userId; // 유저
-  private UUID lastReadMessageId; // 마지막으로 메시지
-  private ZonedDateTime lastReadAt; // 마지막으로 메시지를 읽은 시간
-  private final ZonedDateTime createdAt;
-  private ZonedDateTime updatedAt;
-
-  public ReadStatus(UUID channelId, UUID userId, UUID lastReadMessageId) {
-    this.id = UUID.randomUUID();
-    this.channelId = channelId;
-    this.userId = userId;
-    this.lastReadMessageId = lastReadMessageId;
-    this.lastReadAt = ZonedDateTime.now();
-    this.createdAt = ZonedDateTime.now();
-    this.updatedAt = ZonedDateTime.now(); //
-  }
-
-  public void updateLastReadMessage(UUID messageId) {
-    this.lastReadMessageId = messageId;
-    this.lastReadAt = ZonedDateTime.now(); // 메시지 읽은 시간 업데이트
-    setUpdatedAt();
-  }
-
-  private void setUpdatedAt() {
-    this.updatedAt = ZonedDateTime.now();
-  }
-}
\ No newline at end of file
Index: src/main/resources/application.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yaml b/src/main/resources/application.yaml
deleted file mode 100644
--- a/src/main/resources/application.yaml	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,21 +0,0 @@
-spring:
-  application:
-    name: discodeit
-  jpa:
-    open-in-view: false
-
-discodeit:
-  storage:
-
-    data-dir: data
-    # 이미지 파일
-    image-dir: C:/Users/ych61/IdeaProjects/codeit_sprint/2-sprint-mission/images
-# 로깅 설정
-logging:
-  level:
-    root: INFO
-    com.sprint.mission.discodeit: DEBUG
-    org.springframework.web: INFO
-
-jwt:
-  secret: your-very-strong-and-long-secret-key-please-change-this #
\ No newline at end of file
Index: src/main/java/org/example/Main.java
===================================================================
diff --git a/src/main/java/org/example/Main.java b/src/main/java/org/example/Main.java
deleted file mode 100644
--- a/src/main/java/org/example/Main.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,207 +0,0 @@
-//package org.example;
-//
-//import com.sprint.mission.discodeit.dto.UserDto;
-//import com.sprint.mission.discodeit.entity.Message;
-//import com.sprint.mission.discodeit.entity.User;
-//import com.sprint.mission.discodeit.entity.UserStatus;
-//import com.sprint.mission.discodeit.file.FileChannelRepositoryImplement;
-//import com.sprint.mission.discodeit.file.FileMessageRepositoryImplement;
-//import com.sprint.mission.discodeit.file.FileUserRepositoryImplement;
-//import com.sprint.mission.discodeit.basic.serviceimpl.BasicChannelService;
-//import com.sprint.mission.discodeit.basic.serviceimpl.BasicMessageService;
-//import com.sprint.mission.discodeit.basic.serviceimpl.BasicUserService;
-//import com.sprint.mission.discodeit.basic.serviceimpl.UserChannelService;
-//import com.sprint.mission.discodeit.service.*;
-//
-//import java.io.File;
-//import java.util.List;
-//import java.util.Set;
-//import java.util.UUID;
-//
-//
-//public class Main {
-//
-//    // 서비스 객체
-//    private static UserService userService;
-//    private static ChannelService channelService;
-//    private static MessageService messageService;
-//
-//    // 테스트에 사용할 ID
-//    private static UUID userId;
-//    private static UUID channelId;
-//    private static UUID messageId;
-//
-//    public static void main(String[] args) {
-//        System.out.println("===== 서비스 계층 테스트 시작 =====");
-//
-//        // 테스트 전 data 디렉토리 생성
-//        File dataDir = new File("discodeit/data");
-//        if (!dataDir.exists()) {
-//            dataDir.mkdirs();
-//        }
-//
-//        // 서비스 객체 초기화
-//        initializeServices();
-//
-//        // 1. 유저 서비스 테스트
-//        testUserService();
-//
-//        // 2. 채널 서비스 테스트
-//        testChannelService();
-//
-//        // 3. 메시지 서비스 테스트
-//        testMessageService();
-//
-//        System.out.println("===== 서비스 계층 테스트 완료 =====");
-//    }
-//
-//    private static void initializeServices() {
-//        // 레포지토리 객체 생성 - 싱글톤 패턴 사용
-//        UserRepository userRepository = FileUserRepositoryImplement.getInstance();
-//        ChannelRepository channelRepository = FileChannelRepositoryImplement.getInstance();
-//        MessageRepository messageRepository = FileMessageRepositoryImplement.getInstance();
-//
-//        UserChannelService userChannelService = new UserChannelService(userRepository, channelRepository);
-//        UserStatusRepository userStatus = new UserStatusRepositoryImplement();
-//        userService = new BasicUserService(userRepository, userChannelService,userStatus);
-//        channelService = new BasicChannelService(channelRepository, userChannelService);
-//        messageService = new BasicMessageService(messageRepository, userRepository, channelRepository);
-//
-//        System.out.println("서비스 객체 초기화 완료");
-//    }
-//
-//    private static void testUserService() {
-//        System.out.println("\n----- 유저 서비스 테스트 -----");
-//
-//        // 유저 생성
-//        String email = "test@example.com";
-//        String password = "password123";
-//
-//        try {
-//            // 유저 생성
-//            userService.createdUser(email, password);
-//            System.out.println("유저 생성 성공: " + email);
-//
-////            // 생성된 유저 ID 가져오기
-////            Set<UserDto.Summary> allUsers = userService.findByAllUsersId();
-////            if (!allUsers.isEmpty()) {
-////                userId = allUsers.iterator().next();
-////                System.out.println("유저 ID: " + userId);
-//          //  }
-//
-//            // 유저 조회
-//            User foundUser = userService.findByUserId(userId);
-//            System.out.println("유저 조회: " + foundUser.getEmail());
-//
-////            // 유저 이메일 수정
-////            String newEmail = "updated@example.com";
-////            userService.updateEmail(userId, newEmail);
-////            System.out.println("이메일 수정: " + newEmail);
-//
-//            // 유저 삭제 테스트 이후 수행을 위해 삭제 코드 주석 처리
-//            // userService.deleteUser(userId);
-//            // System.out.println("유저 삭제 완료");
-//
-//        } catch (Exception e) {
-//            System.out.println("유저 서비스 테스트 중 오류: " + e.getMessage());
-//            e.printStackTrace();
-//        }
-//    }
-////
-////    private static void testChannelService() {
-////        System.out.println("\n----- 채널 서비스 테스트 -----");
-////
-////        // userId가 null이면 유저 서비스 테스트가 실패한 것이므로 새 유저 생성
-////        if (userId == null) {
-////            String email = "channel_test@example.com";
-////            String password = "password123";
-////            try {
-////                userService.createdUser(email, password);
-////                Set<UUID> allUsers = userService.findByAllUsersId();
-////                if (!allUsers.isEmpty()) {
-////                    userId = allUsers.iterator().next();
-////                    System.out.println("채널 테스트용 새 유저 생성: " + userId);
-////                }
-////            } catch (Exception e) {
-////                System.out.println("채널 테스트용 유저 생성 실패: " + e.getMessage());
-////                return;
-////            }
-////        }
-//
-////        try {
-////            // 채널 생성
-////            String channelName = "테스트채널";
-////            channelService.createChannel(channelName, userId);
-////            System.out.println("채널 생성 성공: " + channelName);
-////
-////            // 채널 목록 조회
-////            Set<UUID> channels = channelService.findByAllChannel();
-////            if (!channels.isEmpty()) {
-////                channelId = channels.iterator().next();
-////                System.out.println("채널 ID: " + channelId);
-////            }
-////
-//////            // 채널 이름 변경
-//////            String newChannelName = "수정된채널";
-////            channelService.setChannelName(channelId,newChannelName,userId);
-////            System.out.println("채널 이름 변경: " + newChannelName);
-//
-//            // 채널 사용자 목록
-//            Set<UUID> channelUsers = channelService.getChannelUserList(channelId);
-//            System.out.println("채널 사용자 수: " + channelUsers.size());
-//
-//            // 채널 탈퇴 (소유자는 탈퇴가 불가능하므로 실행하지 않음)
-//
-//        } catch (Exception e) {
-//            System.out.println("채널 서비스 테스트 중 오류: " + e.getMessage());
-//            e.printStackTrace();
-//        }
-//    }
-//
-//    private static void testMessageService() {
-//        System.out.println("\n----- 메시지 서비스 테스트 -----");
-//
-//        if (userId == null || channelId == null) {
-//            System.out.println("유저 또는 채널이 없어 메시지 테스트를 진행할 수 없습니다.");
-//            return;
-//        }
-//
-//        try {
-//            // 메시지 생성
-//            String content = "테스트 메시지입니다.";
-//            Message message = messageService.create(content, channelId, userId);
-//            messageId = message.getId();
-//            System.out.println("메시지 생성 성공: " + content);
-//
-//            // 메시지 조회
-//            Message foundMessage = messageService.findByMessage(messageId);
-//            System.out.println("메시지 조회: " + foundMessage.getMessage());
-//
-//            // 메시지 내용 수정
-//            String newContent = "수정된 메시지입니다.";
-//            messageService.updateMessage(messageId, newContent);
-//            System.out.println("메시지 수정: " + newContent);
-//
-//            // 전체 메시지 조회
-//            List<Message> allMessages = messageService.findAllMessage();
-//            System.out.println("전체 메시지 수: " + allMessages.size());
-//
-//            // 메시지 삭제
-//            boolean deleted = messageService.deleteMessage(messageId);
-//            System.out.println("메시지 삭제 " + (deleted ? "성공" : "실패"));
-//
-//            // 테스트 종료 후 정리
-//            // 채널 삭제
-//            // channelService.removeChannel(channelId, userId);
-//            // System.out.println("채널 삭제 완료");
-//
-//            // 유저 삭제
-//            // userService.deleteUser(userId);
-//            // System.out.println("유저 삭제 완료");
-//
-//        } catch (Exception e) {
-//            System.out.println("메시지 서비스 테스트 중 오류: " + e.getMessage());
-//            e.printStackTrace();
-//        }
-//    }
-//}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/MessageCreatedEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/MessageCreatedEvent.java b/src/main/java/com/sprint/mission/discodeit/event/MessageCreatedEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/MessageCreatedEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,17 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class MessageCreatedEvent {
-    private final UUID messageId;
-    private final UUID channelId;
-    private final UUID authorId;
-    
-    public MessageCreatedEvent(UUID messageId, UUID channelId, UUID authorId) {
-        this.messageId = messageId;
-        this.channelId = channelId;
-        this.authorId = authorId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserService.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserService.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,159 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl;
-
-import com.sprint.mission.discodeit.dto.common.ListSummary;
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.dto.UserDto.Summary;
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.entity.UserStatus;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.exception.DataConflictException;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-import com.sprint.mission.discodeit.mapping.UserMapping;
-import com.sprint.mission.discodeit.service.*;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-import org.springframework.validation.annotation.Validated;
-
-import java.util.*;
-
-@Service
-@Validated
-@RequiredArgsConstructor
-public class BasicUserService implements UserService {
-
-  private final UserRepository userRepository;
-  private final UserStatusRepository userStatusRepository;
-  private final ChannelRepository channelRepository;
-  private final ReadStatusRepository readStatusRepository;
-  private final UserStatusService userStatusService;
-  private final BinaryContentService binaryContentService;
-
-
-  @Override
-  public Summary findByUserId(UUID id) {
-    User user = userRepository.findByUser(id)
-        .orElseThrow(() -> new ResourceNotFoundException("User", "id", id));
-    UserStatus userStatus = userStatusRepository.findByUserId(id)
-        .orElseThrow(() -> new ResourceNotFoundException("UserStatus", "userId", id));
-    return UserMapping.INSTANCE.userToSummary(user, userStatus);
-
-  }
-
-  @Override
-  public ListSummary<Summary> findByAllUsersId() {
-    Set<UUID> userIds = userRepository.findAllUsers();
-    List<UserDto.Summary> summaries = new ArrayList<>();
-
-    for (UUID userId : userIds) {
-      User user = userRepository.findByUser(userId)
-          .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-      UserStatus status = userStatusRepository.findByUserId(userId)
-          .orElseThrow(() -> new ResourceNotFoundException("UserStatus", "userId", userId));
-      summaries.add(UserMapping.INSTANCE.userToSummary(user, status));
-    }
-
-    return new ListSummary<>(summaries);
-  }
-
-
-  @Override
-  public void deleteUser(UUID userId) {
-    userRepository.findByUser(userId)
-        .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-
-    binaryContentService.deleteBinaryContentByOwner(userId);
-    userStatusService.deleteUserStatus(userId);
-    cleanupUserChannels(userId);
-
-    if (!userRepository.deleteUser(userId)) {
-      throw new InvalidRequestException("user", "사용자 삭제에 실패했습니다");
-    }
-
-
-  }
-
-  @Override
-  public UserDto.Response createdUser(UserDto.Create createUserDto) {
-    if (createUserDto.getEmail() != null) {
-      userRepository.findByEmail(createUserDto.getEmail())
-          .ifPresent(user -> {
-            throw new DataConflictException("User", "email", createUserDto.getEmail());
-          });
-    }
-
-    User user = new User(createUserDto.getEmail(), createUserDto.getPassword());
-    if (!userRepository.register(user)) {
-      throw new InvalidRequestException("user", "사용자 등록에 실패했습니다");
-    }
-
-    userStatusService.createUserStatus(user.getId());
-    return UserMapping.INSTANCE.userToResponse(user);
-  }
-
-  @Override
-  public UserDto.Update updateUser(UUID userId, UserDto.Update updateUserDto) {
-    User user = userRepository.findByUser(userId)
-        .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-
-    String newPassword = updateUserDto.getPassword();
-
-    if (newPassword != null) {
-      String existingPassword = user.getPassword();
-      if (newPassword.equals(existingPassword)) {
-        throw new InvalidRequestException("기존 비밀번호와 동일한 비밀번호로는 변경할 수 없습니다");
-      }
-      user.setPassword(newPassword);
-
-    }
-
-    if (updateUserDto.getProfileImage() != null) {
-      user.setProfileId(updateUserDto.getProfileImage());
-    }
-
-    if (!userRepository.updateUser(user)) {
-      throw new InvalidRequestException("user", "사용자 정보 업데이트에 실패했습니다");
-    }
-    user.setUpdateAt();
-
-    return UserMapping.INSTANCE.userToDto(user);
-  }
-
-  @Override
-  public boolean existsById(String userId) {
-    return userRepository.findByUser(UUID.fromString(userId)).isPresent();
-  }
-
-  private User getUserOrThrow(UUID userId) {
-    return userRepository.findByUser(userId)
-        .orElseThrow(() -> new ResourceNotFoundException("User", "id", userId));
-  }
-
-  private void cleanupUserChannels(UUID userId) {
-    User user = getUserOrThrow(userId);
-    if (user.getBelongChannels() == null) {
-      return;
-    }
-
-    for (UUID channelId : new ArrayList<>(user.getBelongChannels())) {
-      channelRepository.findById(channelId).ifPresent(channel -> {
-
-        channel.leaveChannel(userId);
-        channelRepository.updateChannel(channel);
-
-        readStatusRepository.findByUserIdAndChannelId(userId, channelId)
-            .ifPresent(readStatus -> readStatusRepository.deleteReadStatus(readStatus.getId()));
-
-      });
-
-    }
-  }
-
-  @Override
-  public void leaveChannel(UUID userId, UUID channelId) {
-    User user = getUserOrThrow(userId);
-    if (!user.getBelongChannels().removeIf(c -> c.equals(channelId))) {
-      throw new InvalidRequestException("사용자가 해당 채널에 속해있지 않습니다");
-    }
-  }
-}
-
Index: src/main/java/com/sprint/mission/discodeit/service/ChannelRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/ChannelRepository.java b/src/main/java/com/sprint/mission/discodeit/service/ChannelRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/ChannelRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,19 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.entity.Channel;
-
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
-
-public interface ChannelRepository {
-    boolean register(Channel channel);
-    Optional<Channel> findById(UUID id);
-    Optional<Channel> findByName(String name);
-    Set<UUID> allChannelIdList();
-    Optional<String> findChannelNameById(UUID channelId);
-    boolean deleteChannel(UUID id);
-    boolean updateChannel(Channel channel);
-}
-
-
Index: src/main/java/com/sprint/mission/discodeit/dto/UserDto.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/UserDto.java b/src/main/java/com/sprint/mission/discodeit/dto/UserDto.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/UserDto.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,112 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import com.sprint.mission.discodeit.dto.common.Profile;
-import com.sprint.mission.discodeit.dto.common.TimeStamps;
-import com.sprint.mission.discodeit.dto.common.UserChannels;
-import com.sprint.mission.discodeit.dto.common.UserData;
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.entity.UserStatus;
-import com.sprint.mission.discodeit.util.StatusOperation;
-import jakarta.validation.constraints.Email;
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Getter;
-import lombok.Setter;
-
-import java.time.ZonedDateTime;
-import java.util.Set;
-import java.util.UUID;
-
-//유저 dto
-public class UserDto {
-
-  private Profile profile;
-  private TimeStamps timeStamps;
-  private UserChannels userChannels;
-  private UserData userData;
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Create {
-
-    @NotBlank
-    @Email
-    private final String email;         // 이메일
-    @NotBlank
-    private final String password;      // 비밀번호
-  }
-
-  //응답 dto
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Response {
-
-    @NotNull
-    private final UUID id;//사용자 ID
-    @NotBlank
-    private final String email;
-    @NotNull// 이메일//
-    private final Set<UUID> belongChannels; // 가입한 채널 목록
-    private final UUID profileImage;      // 프로필 이미지 ID
-    private final ZonedDateTime createdAt; // 생성 시간
-    private final ZonedDateTime updateAt;  // 업데이트 시간
-
-
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Summary {
-
-    @NotNull
-    private final UUID id;  // 유저 아이디
-    @NotBlank
-    private final String email; // 이메일
-    @NotNull
-    private final Set<UUID> belongChannels;
-    @NotBlank
-    private ZonedDateTime createdAt;
-    @NotBlank
-    private ZonedDateTime updatedAt;
-    @NotBlank
-    private StatusOperation status; // 유저의 상태
-    private UUID profileImage;
-
-
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Update {
-
-    @NotNull
-    private final UUID id;
-    @NotBlank
-    private final String password;
-    private final UUID profileImage;  // 변경(프로필)
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Login {
-
-    @Email
-    @NotBlank
-    private String email;
-    @NotBlank
-    private String password;
-  }
-
-  @AllArgsConstructor
-  @Getter
-  @Builder(toBuilder = true)
-  public static class DeleteResponse {
-
-    @NotNull
-    private final String id;
-    @NotNull
-    private String success;
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/common/ChannelInfo.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/ChannelInfo.java b/src/main/java/com/sprint/mission/discodeit/dto/common/ChannelInfo.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/ChannelInfo.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,14 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import java.util.*;
-import lombok.Builder;
-import lombok.Getter;
-
-@Builder(toBuilder = true)
-@Getter
-public class ChannelInfo {
-
-  private final String channelName;
-  private final String channelType;
-
-}
Index: src/main/java/com/sprint/mission/discodeit/mapping/ChannelMapping.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/mapping/ChannelMapping.java b/src/main/java/com/sprint/mission/discodeit/mapping/ChannelMapping.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/mapping/ChannelMapping.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,58 +0,0 @@
-package com.sprint.mission.discodeit.mapping;
-
-import com.sprint.mission.discodeit.config.CentralMapperConfig;
-import com.sprint.mission.discodeit.dto.ChannelDto;
-import com.sprint.mission.discodeit.dto.common.ChannelInfo;
-import com.sprint.mission.discodeit.dto.common.TimeStamps;
-import com.sprint.mission.discodeit.dto.common.UserChannels;
-import com.sprint.mission.discodeit.entity.Channel;
-import org.mapstruct.*;
-import org.mapstruct.factory.Mappers;
-
-import java.util.HashSet;
-import java.util.Set;
-import java.util.UUID;
-
-@Mapper(config = CentralMapperConfig.class)
-public interface ChannelMapping {
-
-  @Mapping(target = "CompositeIdentifier.id", source = "channelId")
-  @Mapping(target = "CompositeIdentifier.ownerId", source = "ownerId")
-  @Mapping(target = "ChannelInfo.channelName", source = "channelName")
-  @Mapping(target = "ChannelInfo.channelType", source = "channelType")
-  @Mapping(target = "UserChannels.belongChannels", source = "users")
-  @Mapping(target = "TimeStamps.createdAt", source = "createdAt")
-  @Mapping(target = "TimeStamps.updateAt", source = "updatedAt")
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  ChannelDto.Response channelToResponse(Channel channel);
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  ChannelDto.Update channelToUpdateDto(Channel channel);
-
-  default Channel toEntity(ChannelDto.CreatePublic dto) {
-    if (dto == null) {
-      return null;
-    }
-    if (dto.getDescription() != null && !dto.getDescription().isEmpty()) {
-      return new Channel(dto.getChannelName(), dto.getOwnerId(), dto.getDescription());
-    } else {
-      return new Channel(dto.getChannelName(), dto.getOwnerId());
-    }
-  }
-
-  default Channel toEntity(ChannelDto.CreatePrivate dto) {
-    if (dto == null) {
-      return null;
-    }
-
-    if (dto.getChannelName() != null && !dto.getChannelName().isEmpty()) {
-      return new Channel(dto.getChannelName(), dto.getOwnerId(),
-          dto.getParticipantIds() != null ?
-              dto.getParticipantIds() : new HashSet<UUID>());
-    } else {
-      return new Channel(dto.getOwnerId(),
-          dto.getParticipantIds() != null ?
-              dto.getParticipantIds() : new HashSet<UUID>());
-    }
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/exception/AuthException.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/exception/AuthException.java b/src/main/java/com/sprint/mission/discodeit/exception/AuthException.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/exception/AuthException.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,9 +0,0 @@
-package com.sprint.mission.discodeit.exception;
-
-public class AuthException extends RuntimeException {
-    
-    public AuthException(String message) {
-        super(message);
-    }
-
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/ChannelService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/ChannelService.java b/src/main/java/com/sprint/mission/discodeit/service/ChannelService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/ChannelService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,25 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.ChannelDto;
-import java.util.List;
-import java.util.UUID;
-
-public interface ChannelService {
-
-  ChannelDto.Response createPrivateChannel(ChannelDto.CreatePrivate dto);
-
-  ChannelDto.Response createPublicChannel(ChannelDto.CreatePublic dto);
-
-  ChannelDto.Response getChannelDetails(UUID channelId);
-
-  List<ChannelDto.Response> findAllByUserId(UUID userId);
-
-  List<ChannelDto.Response> findAllPublicChannels();
-
-  ChannelDto.Response updateChannel(ChannelDto.Update dto, UUID ownerId);
-
-  void deleteChannel(UUID channelId, UUID ownerId);
-
-  List<ChannelDto.Response> getAccessibleChannels(UUID userId);
-}
-
Index: src/main/java/com/sprint/mission/discodeit/DiscodeitApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/DiscodeitApplication.java b/src/main/java/com/sprint/mission/discodeit/DiscodeitApplication.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/DiscodeitApplication.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,17 +0,0 @@
-package com.sprint.mission.discodeit;
-
-import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.ApplicationContext;
-import org.springframework.context.annotation.ComponentScan;
-
-@SpringBootApplication
-public class DiscodeitApplication {
-
-  public static void main(String[] args) {
-    ApplicationContext context = SpringApplication.run(DiscodeitApplication.class, args);
-
-
-  }
-
-}
Index: src/main/java/com/sprint/mission/discodeit/mapping/ReadStatusMapping.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/mapping/ReadStatusMapping.java b/src/main/java/com/sprint/mission/discodeit/mapping/ReadStatusMapping.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/mapping/ReadStatusMapping.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,21 +0,0 @@
-package com.sprint.mission.discodeit.mapping;
-
-import com.sprint.mission.discodeit.config.CentralMapperConfig;
-import com.sprint.mission.discodeit.dto.ReadStatusDto;
-import com.sprint.mission.discodeit.entity.ReadStatus;
-import org.mapstruct.*;
-import org.mapstruct.factory.Mappers;
-
-
-@Mapper(config = CentralMapperConfig.class)
-public interface ReadStatusMapping {
-
-  ReadStatusDto.ResponseReadStatus toResponseDto(ReadStatus readStatus);
-
-  ReadStatus createDtoToEntity(ReadStatusDto.Create createDto);
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  void updateEntityFromDto(ReadStatusDto.Update updateDto, @MappingTarget ReadStatus readStatus);
-
-
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/MessageDeletedEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/MessageDeletedEvent.java b/src/main/java/com/sprint/mission/discodeit/event/MessageDeletedEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/MessageDeletedEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class MessageDeletedEvent {
-    private final UUID messageId;
-    
-    public MessageDeletedEvent(UUID messageId) {
-        this.messageId = messageId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEventListener.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEventListener.java b/src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEventListener.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEventListener.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,28 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import com.sprint.mission.discodeit.entity.Channel;
-import com.sprint.mission.discodeit.service.ChannelRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.event.EventListener;
-import org.springframework.stereotype.Component;
-
-import java.util.UUID;
-
-@Component
-@RequiredArgsConstructor
-public class UserLeftChannelEventListener {
-    private final ChannelRepository channelRepository;
-    
-    @EventListener
-    public void handleUserLeftChannelEvent(UserLeftChannelEvent event) {
-        UUID userId = event.getUserId();
-        UUID channelId = event.getChannelId();
-        
-        Channel channel = channelRepository.findChannelById(channelId).orElse(null);
-        if (channel == null) return;
-        
-        // 채널 엔티티의 메서드 활용
-        channel.leaveChannel(userId);
-        channelRepository.updateChannel(channel);
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/exception/GlobalExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/exception/GlobalExceptionHandler.java b/src/main/java/com/sprint/mission/discodeit/exception/GlobalExceptionHandler.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/exception/GlobalExceptionHandler.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,138 +0,0 @@
-package com.sprint.mission.discodeit.exception;
-
-import com.sprint.mission.discodeit.dto.ErrorResponse;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.http.converter.HttpMessageNotReadableException;
-import org.springframework.validation.FieldError;
-import org.springframework.web.bind.MethodArgumentNotValidException;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-import org.springframework.web.bind.annotation.ResponseStatus;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.stream.Collectors;
-
-@ControllerAdvice
-public class GlobalExceptionHandler {
-    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);
-    @ExceptionHandler(InvalidRequestException.class)
-    @ResponseStatus(HttpStatus.BAD_REQUEST)
-    public ResponseEntity<ErrorResponse> handleInvalidRequestException(InvalidRequestException ex) {
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Bad Request")
-                .status(HttpStatus.BAD_REQUEST.value())
-                .code("INVALID_REQUEST")
-                .message(ex.getMessage())
-                .build();
-        
-        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
-    }
-    
-    @ExceptionHandler(HttpMessageNotReadableException.class)
-    @ResponseStatus(HttpStatus.BAD_REQUEST)
-    public ResponseEntity<ErrorResponse> handleHttpMessageNotReadableException(HttpMessageNotReadableException ex) {
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Bad Request")
-                .status(HttpStatus.BAD_REQUEST.value())
-                .code("MALFORMED_JSON")
-                .message("JSON 파싱 오류가 발생했습니다: " + ex.getMessage())
-                .build();
-        
-        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
-    }
-    
-    @ExceptionHandler(MethodArgumentNotValidException.class)
-    @ResponseStatus(HttpStatus.BAD_REQUEST)
-    public ResponseEntity<ErrorResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {
-        Map<String, String> errors = ex.getBindingResult()
-                .getFieldErrors()
-                .stream()
-                .collect(Collectors.toMap(
-                        FieldError::getField,
-                        fieldError -> fieldError.getDefaultMessage() != null ? fieldError.getDefaultMessage() : "유효하지 않은 값",
-                        (error1, error2) -> error1
-                ));
-                
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Bad Request")
-                .status(HttpStatus.BAD_REQUEST.value())
-                .code("VALIDATION_ERROR")
-                .message("입력 값 검증에 실패했습니다")
-                .details(errors)
-                .build();
-                
-        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
-    }
-    
-    @ExceptionHandler(AuthException.class)
-    @ResponseStatus(HttpStatus.UNAUTHORIZED)
-    public ResponseEntity<ErrorResponse> handleAuthenticationException(AuthException ex) {
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Unauthorized")
-                .status(HttpStatus.UNAUTHORIZED.value())
-                .code("AUTHENTICATION_FAILED")
-                .message(ex.getMessage())
-                .build();
-                
-        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
-    }
-    
-    @ExceptionHandler(ForbiddenException.class)
-    @ResponseStatus(HttpStatus.FORBIDDEN)
-    public ResponseEntity<ErrorResponse> handleAccessDeniedException(ForbiddenException ex) {
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Forbidden")
-                .status(HttpStatus.FORBIDDEN.value())
-                .code("ACCESS_DENIED")
-                .message(ex.getMessage())
-                .build();
-                
-        return ResponseEntity.status(HttpStatus.FORBIDDEN).body(response);
-    }
-        @ExceptionHandler(ResourceNotFoundException.class)
-        @ResponseStatus(HttpStatus.NOT_FOUND)
-        public ResponseEntity<ErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex) {
-            ErrorResponse response = ErrorResponse.builder()
-                    .error("Not Found")
-                    .status(HttpStatus.NOT_FOUND.value())
-                    .code("RESOURCE_NOT_FOUND")
-                    .message("요청하신 리소스를 찾을 수 없습니다.")
-                    .build();
-
-            return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
-        }
-    
-    @ExceptionHandler(DataConflictException.class)
-    @ResponseStatus(HttpStatus.CONFLICT)
-    public ResponseEntity<ErrorResponse> handleDataConflictException(DataConflictException ex) {
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Conflict")
-                .status(HttpStatus.CONFLICT.value())
-                .code("DATA_CONFLICT")
-                .message(ex.getMessage())
-                .build();
-                
-        return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
-    }
-    
-    @ExceptionHandler(Exception.class)
-    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
-    public ResponseEntity<ErrorResponse> handleException(Exception ex) {
-        log.error("예상치 못한 서버 오류 발생:", ex);
-        ErrorResponse response = ErrorResponse.builder()
-                .error("Internal Server Error")
-                .status(HttpStatus.INTERNAL_SERVER_ERROR.value())
-                .code("SERVER_ERROR")
-                .message("서버 내부 오류가 발생했습니다")
-                .build();
-                
-        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
-    }
-}
-
-
-
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicChannelService.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicChannelService.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicChannelService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicChannelService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,226 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl;
-
-import com.sprint.mission.discodeit.dto.ChannelDto;
-import com.sprint.mission.discodeit.dto.MessageDto;
-import com.sprint.mission.discodeit.dto.MessageDto.Response;
-import com.sprint.mission.discodeit.dto.ReadStatusDto;
-import com.sprint.mission.discodeit.entity.Channel;
-import com.sprint.mission.discodeit.entity.Message;
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.exception.DataConflictException;
-import com.sprint.mission.discodeit.exception.ForbiddenException;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.mapping.ChannelMapping;
-import com.sprint.mission.discodeit.service.*;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import java.time.ZonedDateTime;
-import java.util.*;
-
-@Service
-@RequiredArgsConstructor
-public class BasicChannelService implements ChannelService {
-
-  private final ChannelRepository channelRepository;
-  private final MessageRepository messageRepository;
-  private final MessageService messageService;
-  private final UserRepository userRepository;
-  private final ReadStatusService readStatusService;
-  private final UserService userService;
-
-
-  //private 명확하므로 읽음상태 생성
-  @Override
-  public ChannelDto.Response createPrivateChannel(ChannelDto.CreatePrivate dto) {
-    Channel channel;
-    if (dto.getChannelName() != null && !dto.getChannelName().isEmpty()) {
-      channel = new Channel(dto.getChannelName(), dto.getOwnerId(), dto.getParticipantIds());
-    } else {
-      channel = new Channel(dto.getOwnerId(), dto.getParticipantIds());
-    }
-    channelRepository.register(channel);
-
-    // 모든 참여자에 대한 ReadStatus 생성
-    for (UUID userId : dto.getParticipantIds()) {
-      boolean existsUser = userService.existsById(String.valueOf(userId));
-      if (!existsUser) {
-        throw new ResourceNotFoundException("User with id " + userId + " not found");
-      }
-      ReadStatusDto.Create readStatusDto = new ReadStatusDto.Create(channel.getChannelId(), userId);
-      readStatusService.create(readStatusDto);
-    }
-
-    return ChannelMapping.INSTANCE.channelToResponse(channel);
-  }
-
-  @Override
-  public ChannelDto.Response createPublicChannel(ChannelDto.CreatePublic dto) {
-
-    checkChannelNameDuplication(dto.getChannelName());
-    Channel channel;
-    if (dto.getDescription() != null && !dto.getDescription().isEmpty()) {
-      channel = new Channel(dto.getChannelName(), dto.getOwnerId(), dto.getDescription());
-    } else {
-      channel = new Channel(dto.getChannelName(), dto.getOwnerId());
-    }
-    if (channelRepository.register(channel)) {
-      return ChannelMapping.INSTANCE.channelToResponse(channel);
-    } else {
-      throw new RuntimeException("저장 중 에러");
-    }
-  }
-
-  @Override
-  public ChannelDto.Response getChannelDetails(UUID channelId) {
-    Channel channel = channelRepository.findById(channelId)
-        .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", channelId));
-
-    ChannelDto.Response response = ChannelMapping.INSTANCE.channelToResponse(channel);
-
-    findLatestMessageTimestamp(channelId).ifPresent(response::setLastMessageTime);
-
-    return response;
-  }
-
-  @Override
-  public List<ChannelDto.Response> findAllByUserId(UUID userId) {
-
-    Set<UUID> allChannelIds = channelRepository.allChannelIdList();
-    List<ChannelDto.Response> result = new ArrayList<>();
-
-    for (UUID channelId : allChannelIds) {
-      Optional<Channel> channelOpt = channelRepository.findById(channelId);
-      if (channelOpt.isEmpty()) {
-        continue;
-      }
-
-      Channel channel = channelOpt.get();
-
-      // PUBLIC 채널이거나 사용자가 채널 멤버인 경우만 결과에 포함
-      if (channel.isPublic() || channel.getUserList().contains(userId)) {
-        ChannelDto.Response response = ChannelMapping.INSTANCE.channelToResponse(channel);
-
-        // 최근 메시지 시간 정보 추가
-        findLatestMessageTimestamp(channelId).ifPresent(response::setLastMessageTime);
-
-        result.add(response);
-      }
-    }
-
-    return result;
-  }
-
-  @Override
-  public List<ChannelDto.Response> findAllPublicChannels() {
-    Set<UUID> allChannelIds = channelRepository.allChannelIdList();
-    List<ChannelDto.Response> result = new ArrayList<>();
-
-    for (UUID channelId : allChannelIds) {
-      Optional<Channel> channelOpt = channelRepository.findById(channelId);
-      if (channelOpt.isEmpty()) {
-        continue;
-      }
-
-      Channel channel = channelOpt.get();
-
-      if (channel.isPublic()) {
-        ChannelDto.Response response = ChannelMapping.INSTANCE.channelToResponse(channel);
-
-        // 최근 메시지 시간 정보 추가
-        findLatestMessageTimestamp(channelId).ifPresent(response::setLastMessageTime);
-
-        result.add(response);
-      }
-    }
-
-    return result;
-  }
-
-  @Override
-  public ChannelDto.Response updateChannel(ChannelDto.Update dto, UUID channelId) {
-    Channel channel = channelRepository.findById(channelId)
-        .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", dto.getChannelId()));
-    if (!channel.getOwnerId().equals(dto.getOwnerId())) {
-      throw new InvalidRequestException("권한이 없습니다");
-    }
-    // PRIVATE 채널은 수정 불가
-    if (channel.isPrivate()) {
-      throw new InvalidRequestException("channel", "PRIVATE 채널은 수정할 수 없습니다");
-    }
-
-    // 채널 정보 업데이트
-    if (dto.getChannelName() != null && !dto.getChannelName().isEmpty()) {
-      channel.setChannelName(dto.getChannelName());
-    }
-
-    if (dto.getDescription() != null) {
-      channel.setDescription(dto.getDescription());
-    }
-
-    channelRepository.updateChannel(channel);
-
-    return ChannelMapping.INSTANCE.channelToResponse(channel);
-  }
-
-  @Override
-  public void deleteChannel(UUID channelId, UUID ownerId) {
-    Channel channel = channelRepository.findById(channelId)
-        .orElseThrow(() -> new ResourceNotFoundException("Channel", "id", channelId));
-
-    if (!channel.getOwnerId().equals(ownerId)) {
-      throw new ForbiddenException("channel", "delete");
-    }
-
-    channelRepository.deleteChannel(channelId);
-    // 채널의 메시지 직접 삭제
-    List<MessageDto.Response> allByChannelId = messageService.findAllByChannelId(channelId);
-    for (Response response : allByChannelId) {
-      messageService.deleteMessage(response.getId());
-    }
-    // 채널의 읽음 상태 직접 삭제
-    readStatusService.deleteAllByChannelId(channelId);
-    // 사용자의 채널 목록에서 해당 채널 제거
-    Set<UUID> userIds = channel.getUserList();
-    for (UUID userId : userIds) {
-      userService.leaveChannel(userId, channelId);
-    }
-  }
-
-  //유저가 속한 프라이빗+공개채널 모두 반환
-  @Override
-  public List<ChannelDto.Response> getAccessibleChannels(UUID userId) {
-    List<ChannelDto.Response> channels = new ArrayList<>();
-
-    Set<UUID> channelIdList = channelRepository.allChannelIdList();
-    for (UUID channelId : channelIdList) {
-      Optional<Channel> allChannels = channelRepository.findById(channelId);
-      if (allChannels.isPresent() && allChannels.get().getUserList().contains(userId)) {
-        channels.add(ChannelMapping.INSTANCE.channelToResponse(allChannels.get()));
-      }
-    }
-
-    return channels;
-  }
-
-  // 채널명 중복 체크 로직
-  private void checkChannelNameDuplication(String channelName) {
-    channelRepository.findByName(channelName).ifPresent(channel -> {
-      throw new DataConflictException("Channel", "name", channelName);
-    });
-  }
-
-  private Optional<ZonedDateTime> findLatestMessageTimestamp(UUID channelId) {
-    List<Message> channelMessages = messageRepository.findAllByChannelId(channelId);
-    if (channelMessages.isEmpty()) {
-      return Optional.empty();
-    }
-
-    return channelMessages.stream()
-        .map(Message::getCreatedAt)
-        .max(ZonedDateTime::compareTo);
-  }
-}
-
-
Index: src/main/java/com/sprint/mission/discodeit/util/StatusOperation.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/util/StatusOperation.java b/src/main/java/com/sprint/mission/discodeit/util/StatusOperation.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/util/StatusOperation.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,6 +0,0 @@
-package com.sprint.mission.discodeit.util;
-
-public enum StatusOperation {
-    ONLINE,
-    OFFLINE
-}
Index: src/main/java/com/sprint/mission/discodeit/event/UserJoinedChannelEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/UserJoinedChannelEvent.java b/src/main/java/com/sprint/mission/discodeit/event/UserJoinedChannelEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/UserJoinedChannelEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,15 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class UserJoinedChannelEvent {
-    private final UUID userId;
-    private final UUID channelId;
-    
-    public UserJoinedChannelEvent(UUID userId, UUID channelId) {
-        this.userId = userId;
-        this.channelId = channelId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BinaryContentServiceImpl.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BinaryContentServiceImpl.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BinaryContentServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BinaryContentServiceImpl.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,216 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl;
-
-
-import com.sprint.mission.discodeit.dto.BinaryContentDto;
-import com.sprint.mission.discodeit.entity.BinaryContent;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.mapping.FileMapping;
-import com.sprint.mission.discodeit.service.*;
-import java.io.OutputStream;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipOutputStream;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.*;
-
-
-@Service
-@RequiredArgsConstructor // final 필드 생성자 자동 주입
-public class BinaryContentServiceImpl implements BinaryContentService {
-
-  private final UserRepository userRepository;
-  private final FileBinaryContentRepository binaryContentRepository;
-  private final MessageRepository messageRepository;
-
-  @Override
-  public BinaryContentDto.Summary createBinaryContent(BinaryContentDto.Upload uploadDto)
-      throws IOException {
-    UUID ownerId = uploadDto.getOwnerId();
-    String ownerType = uploadDto.getOwnerType();
-    MultipartFile file = uploadDto.getFile();
-
-    if (file == null || file.isEmpty()) {
-      throw new IllegalArgumentException("업로드할 파일이 없습니다.");
-    }
-    validateOwnerExists(ownerId, ownerType);
-
-    try (InputStream inputStream = file.getInputStream()) {
-      BinaryContent persistedMetadata = binaryContentRepository.store(
-          inputStream,
-          file.getContentType(),      // 파일의 MIME 타입
-          file.getOriginalFilename(), // 원본 파일 이름
-          file.getSize(),             // 파일 크기
-          ownerId,                    // 소유자 ID
-          ownerType                   // 소유자 타입/용도
-      );
-      return FileMapping.INSTANCE.binaryContentToSummary(persistedMetadata);
-
-    } catch (IOException e) {
-      throw new RuntimeException("파일 저장 처리 중 오류가 발생했습니다.", e);
-    }
-  }
-
-  @Override
-  public void writeFilesAsZip(List<UUID> ids, OutputStream os) throws IOException {
-    try (ZipOutputStream zos = new ZipOutputStream(os)) {
-      for (UUID contentId : ids) {
-        BinaryContent metadata = getBinaryContentEntity(contentId);
-        Optional<InputStream> streamOpt = getContentStream(contentId);
-
-        if (metadata != null) {
-          try (InputStream fileStream = streamOpt.get()) {
-            String entryName = metadata.getId() + "_" + metadata.getFileName();
-            ZipEntry zipEntry = new ZipEntry(entryName);
-            zos.putNextEntry(zipEntry);
-            byte[] buffer = new byte[1024];
-            int len;
-            while ((len = fileStream.read(buffer)) > 0) {
-              zos.write(buffer, 0, len);
-            }
-            zos.closeEntry();
-          } catch (IOException e) {
-            throw new RuntimeException("오류발생");
-          }
-        }
-      }
-      zos.finish();
-    }
-  }
-
-  @Override
-  public BinaryContentDto.Summary findBinaryContentSummary(UUID id) {
-    BinaryContent binaryContent = binaryContentRepository.findMetadataById(id)
-        .orElseThrow(() -> new ResourceNotFoundException("BinaryContent", "id", id));
-    return FileMapping.INSTANCE.binaryContentToSummary(binaryContent);
-  }
-
-  @Override
-  public List<BinaryContentDto.Summary> findBinaryContentSummariesByIds(List<UUID> ids) {
-    if (ids == null || ids.isEmpty()) {
-      return Collections.emptyList();
-    }
-    List<BinaryContentDto.Summary> summaries = new ArrayList<>();
-    for (UUID id : ids) {
-      try {
-        binaryContentRepository.findMetadataById(id)
-            .ifPresent(
-                content -> summaries.add(FileMapping.INSTANCE.binaryContentToSummary(content)));
-      } catch (Exception e) {
-        System.err.printf(
-            "Warning: Error fetching BinaryContent summary for ID %s: %s. Skipping.%n", id,
-            e.getMessage());
-      }
-    }
-    return summaries;
-  }
-
-  @Override
-  public BinaryContent getBinaryContentEntity(UUID id) {
-    // 리포지토리의 findMetadataById 사용
-    return binaryContentRepository.findMetadataById(id)
-        .orElseThrow(() -> new ResourceNotFoundException("BinaryContent", "id", id));
-  }
-
-  @Override
-  public Optional<InputStream> getContentStream(UUID id) throws IOException {
-    return binaryContentRepository.getContentStream(id);
-  }
-
-  @Override
-  public void deleteBinaryContentByOwner(UUID ownerId) {
-
-    List<BinaryContent> contentsToDelete = binaryContentRepository.findAllMetadataByOwnerId(
-        ownerId);
-
-    if (contentsToDelete.isEmpty()) {
-      return;
-    }
-
-    List<UUID> failedToDeleteIds = new ArrayList<>();
-    for (BinaryContent content : contentsToDelete) {
-      UUID contentId = content.getId();
-      try {
-        if (!binaryContentRepository.deleteById(contentId)) {
-          failedToDeleteIds.add(contentId);
-        }
-      } catch (Exception e) {
-        failedToDeleteIds.add(contentId);
-      }
-    }
-
-    if (!failedToDeleteIds.isEmpty()) {
-      throw new RuntimeException("일부 바이너리 컨텐츠 삭제에 실패했습니다: " + failedToDeleteIds);
-    }
-  }
-
-  @Override
-  public List<BinaryContentDto.DeleteResponse> deleteBinaryContentsByIds(List<UUID> ids) {
-    List<BinaryContentDto.DeleteResponse> responses = new ArrayList<>();
-    if (ids == null || ids.isEmpty()) {
-      return responses;
-    }
-
-    for (UUID id : ids) {
-      String fileName = "N/A"; // 기본값
-      boolean success = false;
-      String message = "";
-
-      try {
-        Optional<BinaryContent> contentOpt = binaryContentRepository.findMetadataById(id);
-        if (contentOpt.isPresent()) {
-          fileName = contentOpt.get().getFileName();
-          if (binaryContentRepository.deleteById(id)) {
-            success = true;
-            message = "성공적으로 삭제되었습니다.";
-          } else {
-            message = "삭제 실패 (파일이 없거나 권한 문제 등)";
-          }
-        } else {
-          success = true;
-          message = "삭제 대상 없음 (ID: " + id + ")";
-          System.err.printf(
-              "Warning: Binary content metadata not found for ID: %s. Skipping deletion.%n", id);
-        }
-      } catch (Exception e) {
-        // 삭제 작업 중 예외 발생
-        success = false;
-        message = "삭제 중 서버 오류 발생: " + e.getMessage();
-        System.err.printf("Error during deletion of binary content ID %s: %s%n", id,
-            e.getMessage());
-      }
-
-      // 응답 DTO 생성 및 리스트 추가
-      responses.add(BinaryContentDto.DeleteResponse.builder()
-          .id(id)
-          .fileName(fileName)
-          .success(success)
-          .message(message)
-          .build());
-    }
-    return responses;
-  }
-
-  private void validateOwnerExists(UUID ownerId, String ownerType) {
-    boolean exists;
-    switch (ownerType) {
-      case "MESSAGE":
-        exists = !messageRepository.findAllByAuthorId(ownerId).isEmpty();
-        if (!exists) {
-          throw new ResourceNotFoundException("Message (owner)", "id", ownerId);
-        }
-        break;
-      case "PROFILE":
-        exists = userRepository.findByUser(ownerId).isPresent();
-        if (!exists) {
-          throw new ResourceNotFoundException("User (owner)", "id", ownerId);
-        }
-        break;
-      default:
-        throw new InvalidRequestException("owner_type", "지원되지 않는 소유자 타입입니다: " + ownerType);
-    }
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/mapping/UserStatusMapping.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/mapping/UserStatusMapping.java b/src/main/java/com/sprint/mission/discodeit/mapping/UserStatusMapping.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/mapping/UserStatusMapping.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,21 +0,0 @@
-package com.sprint.mission.discodeit.mapping;
-
-import com.sprint.mission.discodeit.config.CentralMapperConfig;
-import com.sprint.mission.discodeit.dto.BinaryContentDto;
-import com.sprint.mission.discodeit.dto.StatusDto;
-import com.sprint.mission.discodeit.entity.BinaryContent;
-import com.sprint.mission.discodeit.entity.UserStatus;
-import org.mapstruct.*;
-import org.mapstruct.factory.Mappers;
-import org.springframework.context.annotation.Bean;
-
-@Mapper(config = CentralMapperConfig.class)
-public interface UserStatusMapping {
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  StatusDto.Summary userStatusToSummary(UserStatus userStatus);
-
-  @Mapping(target = "id", source = "userStatus.id")
-  @Mapping(target = "message", expression = "java(message)")
-  StatusDto.ResponseDelete userStatusToResponse(UserStatus userStatus, @Context String message);
-}
Index: src/main/java/com/sprint/mission/discodeit/service/UserStatusRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/UserStatusRepository.java b/src/main/java/com/sprint/mission/discodeit/service/UserStatusRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/UserStatusRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,16 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.entity.UserStatus;
-
-import java.util.Optional;
-import java.util.UUID;
-import java.util.*;
-public interface UserStatusRepository {
-    boolean register(UserStatus userStatus);
-    Optional<UserStatus> findById(UUID id);
-    Optional<UserStatus> findByUserId(UUID userId);
-    List<UserStatus> findAll();
-    boolean update(UserStatus userStatus);
-    boolean delete(UUID id);
-
-}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
--- a/.gitignore	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,37 +0,0 @@
-src/main/java/com/sprint/mission/discodeit/HELP.md
-.gradle
-build/
-!gradle/wrapper/gradle-wrapper.jar
-!**/src/main/**/build/
-!**/src/test/**/build/
-
-### STS ###
-.apt_generated
-.classpath
-.factorypath
-.project
-.settings
-.springBeans
-.sts4-cache
-bin/
-!**/src/main/**/bin/
-!**/src/test/**/bin/
-
-### IntelliJ IDEA ###
-.idea
-*.iws
-*.iml
-*.ipr
-out/
-!**/src/main/**/out/
-!**/src/test/**/out/
-
-### NetBeans ###
-/nbproject/private/
-/nbbuild/
-/dist/
-/nbdist/
-/.nb-gradle/
-
-### VS Code ###
-.vscode/
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
deleted file mode 100644
--- a/gradlew.bat	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,94 +0,0 @@
-@rem
-@rem Copyright 2015 the original author or authors.
-@rem
-@rem Licensed under the Apache License, Version 2.0 (the "License");
-@rem you may not use this file except in compliance with the License.
-@rem You may obtain a copy of the License at
-@rem
-@rem      https://www.apache.org/licenses/LICENSE-2.0
-@rem
-@rem Unless required by applicable law or agreed to in writing, software
-@rem distributed under the License is distributed on an "AS IS" BASIS,
-@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-@rem See the License for the specific language governing permissions and
-@rem limitations under the License.
-@rem
-@rem SPDX-License-Identifier: Apache-2.0
-@rem
-
-@if "%DEBUG%"=="" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-set DIRNAME=%~dp0
-if "%DIRNAME%"=="" set DIRNAME=.
-@rem This is normally unused
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Resolve any "." and ".." in APP_HOME to make it shorter.
-for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if %ERRORLEVEL% equ 0 goto execute
-
-echo. 1>&2
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
-echo. 1>&2
-echo Please set the JAVA_HOME variable in your environment to match the 1>&2
-echo location of your Java installation. 1>&2
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto execute
-
-echo. 1>&2
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
-echo. 1>&2
-echo Please set the JAVA_HOME variable in your environment to match the 1>&2
-echo location of your Java installation. 1>&2
-
-goto fail
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
-
-:end
-@rem End local scope for the variables with windows NT shell
-if %ERRORLEVEL% equ 0 goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-set EXIT_CODE=%ERRORLEVEL%
-if %EXIT_CODE% equ 0 set EXIT_CODE=1
-if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
-exit /b %EXIT_CODE%
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
Index: src/main/java/com/sprint/mission/discodeit/dto/StatusDto.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/StatusDto.java b/src/main/java/com/sprint/mission/discodeit/dto/StatusDto.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/StatusDto.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,56 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import com.sprint.mission.discodeit.util.StatusOperation;
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Getter;
-
-import java.time.ZonedDateTime;
-import java.util.UUID;
-
-public class StatusDto {
-
-    @Getter
-    @Builder(toBuilder = true)
-    public static class Summary {
-        @NotNull
-        private final UUID id; //status 아이디
-        @NotNull
-        private UUID userid; // 유저아이디
-        private ZonedDateTime lastSeenAt; // 마지막 접속 시간
-        private ZonedDateTime updatedAt; // 업데이트 시간
-    }
-
-    @Getter
-    @Builder(toBuilder = true)
-    public static class Create {
-        @NotNull
-        private final UUID userid; //유저 아이디
-    }
-
-
-    @Getter
-    @Builder(toBuilder = true)
-    public static class ResponseDelete {
-        @NotNull
-        private final UUID id;
-        private String message;
-    }
-    @AllArgsConstructor
-    @Getter
-    @Builder(toBuilder = true)
-    public static class StatusRequest {
-        @NotBlank
-        private String status;
-    }
-    @AllArgsConstructor
-    @Getter
-    @Builder(toBuilder = true)
-    public static class StatusResponse {
-        private UUID id;
-        @NotBlank
-        private StatusOperation status;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/exception/DataConflictException.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/exception/DataConflictException.java b/src/main/java/com/sprint/mission/discodeit/exception/DataConflictException.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/exception/DataConflictException.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,9 +0,0 @@
-package com.sprint.mission.discodeit.exception;
-
-public class DataConflictException extends RuntimeException {
-    
-
-    public DataConflictException(String entityType, String field, Object value) {
-        super(String.format("Data conflict for %s with %s: '%s'", entityType, field, value));
-    }
-} 
\ No newline at end of file
Index: src/main/production/codeit_sprint/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties
===================================================================
diff --git a/src/main/production/codeit_sprint/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties b/src/main/production/codeit_sprint/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
--- a/src/main/production/codeit_sprint/com/sprint/mission/discodeit/gradle/wrapper/gradle-wrapper.properties	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,7 +0,0 @@
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
-networkTimeout=10000
-validateDistributionUrl=true
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
Index: src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicReadStatusRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicReadStatusRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicReadStatusRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicReadStatusRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,117 +0,0 @@
-package com.sprint.mission.discodeit.basic.repositoryimpl;
-
-import com.sprint.mission.discodeit.entity.ReadStatus;
-import com.sprint.mission.discodeit.service.ReadStatusRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.*;
-import java.util.stream.Collectors;
-
-
-public class BasicReadStatusRepositoryImplement implements ReadStatusRepository {
-    private final Map<UUID, ReadStatus> readStatusRepository = new HashMap<>();
-
-    @Override
-    public boolean register(ReadStatus readStatus) {
-        readStatusRepository.put(readStatus.getId(), readStatus);
-        return true;
-    }
-    
-    @Override
-    public Optional<ReadStatus> findById(UUID id) {
-        ReadStatus status = readStatusRepository.get(id);
-        return Optional.ofNullable(status);
-    }
-    
-    @Override
-    public List<ReadStatus> findAllByUserId(UUID userId) {
-        if (userId == null) {
-            return new ArrayList<>();
-        }
-        
-        List<ReadStatus> result = new ArrayList<>();
-        for (ReadStatus status : readStatusRepository.values()) {
-            if (userId.equals(status.getUserId())) {
-                result.add(status);
-            }
-        }
-        return result;
-    }
-    
-    @Override
-    public List<ReadStatus> findAll() {
-        return new ArrayList<>(readStatusRepository.values());
-    }
-    
-    @Override
-    public boolean updateReadStatus(ReadStatus readStatus) {
-        if (readStatusRepository.containsKey(readStatus.getId())) {
-            readStatusRepository.put(readStatus.getId(), readStatus);
-            return true;
-        }
-        return false;
-    }
-    
-    @Override
-    public boolean deleteReadStatus(UUID id) {
-        return readStatusRepository.remove(id) != null;
-    }
-    
-    @Override
-    public Optional<ReadStatus> findByUserIdAndChannelId(UUID userId, UUID channelId) {
-        if (userId == null || channelId == null) {
-            return Optional.empty();
-        }
-        
-        for (ReadStatus status : readStatusRepository.values()) {
-            if (userId.equals(status.getUserId()) && channelId.equals(status.getChannelId())) {
-                return Optional.of(status);
-            }
-        }
-        return Optional.empty();
-    }
-
-    @Override
-    public boolean deleteAllByUserId(UUID userId) {
-        boolean success = true;
-        List<ReadStatus> statusesToDelete = new ArrayList<>();
-        
-        // 먼저 삭제할 항목 수집
-        for (ReadStatus status : readStatusRepository.values()) {
-            if (userId.equals(status.getUserId())) {
-                statusesToDelete.add(status);
-            }
-        }
-        
-        // 삭제 실행
-        for (ReadStatus status : statusesToDelete) {
-            if (!deleteReadStatus(status.getId())) {
-                success = false;
-            }
-        }
-        
-        return success;
-    }
-
-    @Override
-    public boolean deleteAllByChannelId(UUID channelId) {
-        boolean success = true;
-        List<ReadStatus> statusesToDelete = new ArrayList<>();
-        
-        // 삭제할 항목 수집
-        for (ReadStatus status : readStatusRepository.values()) {
-            if (channelId.equals(status.getChannelId())) {
-                statusesToDelete.add(status);
-            }
-        }
-        
-        // 삭제 실행
-        for (ReadStatus status : statusesToDelete) {
-            if (!deleteReadStatus(status.getId())) {
-                success = false;
-            }
-        }
-        
-        return success;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/LoginResponse.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/LoginResponse.java b/src/main/java/com/sprint/mission/discodeit/dto/LoginResponse.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/LoginResponse.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,14 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import jakarta.validation.constraints.NotBlank;
-import lombok.Getter;
-
-public record LoginResponse(
-        @NotBlank
-        String email,
-        @NotBlank
-        String success,
-        @NotBlank
-        String token
-) {
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/entity/BinaryContent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/entity/BinaryContent.java b/src/main/java/com/sprint/mission/discodeit/entity/BinaryContent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/entity/BinaryContent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,39 +0,0 @@
-package com.sprint.mission.discodeit.entity;
-
-import lombok.Getter;
-import org.springframework.boot.autoconfigure.domain.EntityScan;
-
-import java.io.Serial;
-import java.io.Serializable;
-import java.time.ZonedDateTime;
-import java.util.Objects;
-import java.util.UUID;
-
-@Getter
-public class BinaryContent implements Serializable {
-
-  @Serial
-  private static final long serialVersionUID = 1L; // Serializable 클래스에 권장
-
-  private final UUID id;
-  private final String contentType;     //파일이ㅡ 타입 jpg 등
-  private final String fileName;
-  private final long size;
-  private final UUID ownerId;
-  private final String ownerType;
-  private String filePath;
-  private ZonedDateTime createdAt; // 생성 시간
-
-
-  public BinaryContent(String contentType, String fileName, long size, UUID ownerId,
-      String ownerType, String filePath) {
-    this.id = UUID.randomUUID();// ID는 외부에서 생성하여 주입
-    this.contentType = contentType;
-    this.fileName = fileName;
-    this.size = size; // 파일 크기 저장
-    this.ownerId = ownerId;
-    this.ownerType = ownerType;
-    this.filePath = filePath;
-    this.createdAt = ZonedDateTime.now();
-  }
-}
Index: src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEvent.java b/src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/UserLeftChannelEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,15 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class UserLeftChannelEvent {
-    private final UUID userId;
-    private final UUID channelId;
-    
-    public UserLeftChannelEvent(UUID userId, UUID channelId) {
-        this.userId = userId;
-        this.channelId = channelId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/entity/UserStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/entity/UserStatus.java b/src/main/java/com/sprint/mission/discodeit/entity/UserStatus.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/entity/UserStatus.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,57 +0,0 @@
-package com.sprint.mission.discodeit.entity;
-
-import com.sprint.mission.discodeit.util.StatusOperation;
-import lombok.Getter;
-import org.springframework.boot.autoconfigure.domain.EntityScan;
-
-import java.io.Serial;
-import java.io.Serializable;
-import java.time.Duration;
-import java.time.ZonedDateTime;
-import java.util.UUID;
-
-
-@Getter
-public class UserStatus implements Serializable {
-
-  @Serial
-  private static final long serialVersionUID = 105L;
-  private static final long ONLINE_MINUTES = 5;
-  private final UUID id; // 클래스 아이디
-  private final UUID userId; // 사용자
-  private ZonedDateTime lastSeenAt; // 마지막 접속 시간
-  private final ZonedDateTime createdAt; // 클래스 생성 시간
-  private ZonedDateTime updatedAt; // 업데이트 시간
-  private StatusOperation status;
-
-  public UserStatus(UUID userId) {
-    this.id = UUID.randomUUID();
-    this.userId = userId;
-    this.lastSeenAt = ZonedDateTime.now();
-    this.createdAt = ZonedDateTime.now();
-    this.updatedAt = null;
-  }
-
-  public void updateLastTime() {
-    this.updatedAt = ZonedDateTime.now();
-  }
-
-  public void setLastSeenAt(ZonedDateTime lastSeenAt) {
-    this.lastSeenAt = lastSeenAt;
-    this.updatedAt = ZonedDateTime.now();
-
-  }
-
-  public void setStatus(StatusOperation statusOperation) {
-    this.status = statusOperation;
-    updateLastTime();
-  }
-
-  public boolean isOnline() {
-    ZonedDateTime now = ZonedDateTime.now();
-    Duration duration = Duration.between(lastSeenAt, now);
-    return duration.toMinutes() < ONLINE_MINUTES;
-  }
-
-
-}
Index: src/main/java/com/sprint/mission/discodeit/event/UserEventListener.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/UserEventListener.java b/src/main/java/com/sprint/mission/discodeit/event/UserEventListener.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/UserEventListener.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,81 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import com.sprint.mission.discodeit.entity.*;
-import com.sprint.mission.discodeit.service.*;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.event.EventListener;
-import org.springframework.stereotype.Component;
-
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-import java.util.stream.Collectors;
-
-
-public class UserEventListener {
-    private final UserRepository userRepository;
-    private final ChannelRepository channelRepository;
-    private final MessageRepository messageRepository;
-    private final BinaryContentRepository binaryContentRepository;
-    private final UserStatusRepository userStatusRepository;
-    private final ReadStatusRepository readStatusRepository;
-    
-    @EventListener
-    public void handleUserDeletedEvent(UserDeletedEvent event) {
-        UUID userId = event.getUserId();
-        
-        // 사용자가 소유한 채널 삭제
-        Set<UUID> allChannelIds = channelRepository.allChannelIdList();
-        for (UUID channelId : allChannelIds) {
-            Channel channel = channelRepository.findChannelById(channelId).orElse(null);
-            if (channel != null && channel.getOwnerID().equals(userId)) {
-                channelRepository.deleteChannel(channelId);
-            }
-        }
-        
-        // 사용자가 작성한 메시지 삭제
-        List<Message> userMessages = messageRepository.findAll().stream()
-                .filter(msg -> msg.getAuthorId().equals(userId))
-                .toList();
-        
-        for (Message message : userMessages) {
-            messageRepository.deleteMessage(message.getId());
-        }
-        
-        // 사용자와 관련된 바이너리 콘텐츠 삭제
-        binaryContentRepository.delete(userId);
-        
-        // 사용자의 읽음 상태 정보 삭제
-        List<ReadStatus> userReadStatuses = readStatusRepository.findAllByUserId(userId);
-        for (ReadStatus status : userReadStatuses) {
-            readStatusRepository.deleteReadStatus(status.getId());
-        }
-
-        // 사용자 상태 정보 삭제
-        userStatusRepository.findByUserId(userId).
-                ifPresent(userStatus -> userStatusRepository.delete(userStatus.getId()));
-    }
-    
-    @EventListener
-    public void handleUserLeftChannelEvent(UserLeftChannelEvent event) {
-        UUID userId = event.getUserId();
-        UUID channelId = event.getChannelId();
-        
-        // 채널 조회 및 사용자 제거
-        Channel channel = channelRepository.findChannelById(channelId).orElse(null);
-        if (channel != null) {
-            // 채널 엔티티의 메서드 활용
-            channel.leaveChannel(userId);
-            channelRepository.updateChannel(channel);
-        }
-        
-        // 사용자 조회 및 채널 제거
-        User user = userRepository.findByUser(userId).orElse(null);
-        if (user != null) {
-            // 사용자 엔티티의 메서드 활용
-            user.removeBelongChannel(channelId);
-            userRepository.updateUser(user);
-        }
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/file/FileMessageRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/file/FileMessageRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/file/FileMessageRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/file/FileMessageRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,126 +0,0 @@
-package com.sprint.mission.discodeit.file;
-
-import com.sprint.mission.discodeit.entity.Message;
-import com.sprint.mission.discodeit.service.MessageRepository;
-import jakarta.annotation.PreDestroy;
-import org.springframework.stereotype.Repository;
-
-import java.io.*;
-import java.util.*;
-import java.util.stream.Collectors;
-
-@Repository("fileMessageRepositoryImplement")
-public class FileMessageRepositoryImplement implements MessageRepository {
-    private String dataDir;
-    private String messageDataFile;
-    
-    private final Map<UUID, Message> messageRepository;
-    
-    public FileMessageRepositoryImplement() {
-        this.dataDir = "./data";
-        this.messageDataFile = "messages.dat";
-        messageRepository = loadData();
-    }
-    
-    public FileMessageRepositoryImplement(String dataDir) {
-        this.dataDir = dataDir;
-        this.messageDataFile = "messages.dat";
-        messageRepository = loadData();
-    }
-    
-    @SuppressWarnings("unchecked")
-    private Map<UUID, Message> loadData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, messageDataFile);
-        System.out.println("메시지 데이터 로드 경로: " + file.getAbsolutePath());
-        
-        if (file.exists()) {
-            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
-                return (Map<UUID, Message>) in.readObject();
-            } catch (IOException | ClassNotFoundException e) {
-                System.err.println("메시지 데이터 로드 오류: " + e.getMessage());
-                return new HashMap<>();
-            }
-        }
-        
-        return new HashMap<>();
-    }
-    
-    private synchronized void saveData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, messageDataFile);
-        System.out.println("메시지 데이터 저장 경로: " + file.getAbsolutePath());
-        
-        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file))) {
-            out.writeObject(messageRepository);
-        } catch (IOException e) {
-            System.err.println("메시지 데이터 저장 오류: " + e.getMessage());
-            throw new RuntimeException("메시지 데이터 저장 실패", e);
-        }
-    }
-
-    @Override
-    public boolean register(Message message) {
-        messageRepository.put(message.getId(), message);
-        saveData();
-        return true;
-    }
-
-    @Override
-    public Optional<Message> findById(UUID messageId) {
-        return Optional.ofNullable(messageRepository.get(messageId));
-    }
-
-    @Override
-    public List<Message> findAll() {
-        return new ArrayList<>(messageRepository.values());
-    }
-
-    @Override
-    public boolean deleteMessage(UUID messageId) {
-        boolean removed = messageRepository.remove(messageId) != null;
-        if (removed) {
-            saveData();
-        }
-        return removed;
-    }
-
-
-    @Override
-    public boolean updateMessage(Message message) {
-        if (message == null || !messageRepository.containsKey(message.getId())) {
-            return false;
-        }
-        messageRepository.put(message.getId(), message);
-        saveData();
-        return true;
-    }
-
-    public List<Message> findAllByAuthorId(UUID authorId) {
-        return messageRepository.values().stream()
-            .filter(message -> authorId.equals(message.getAuthorId()))
-            .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<Message> findAllByChannelId(UUID channelId) {
-        return messageRepository.values().stream()
-            .filter(message -> message.getChannelId() != null && message.getChannelId().equals(channelId))
-            .collect(Collectors.toList());
-    }
-
-    // 애플리케이션 종료 시 데이터 저장 보장
-    @PreDestroy
-    public void saveDataOnShutdown() {
-        System.out.println("애플리케이션 종료 - 메시지 데이터 저장 중");
-        saveData();
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/ReadStatusDto.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/ReadStatusDto.java b/src/main/java/com/sprint/mission/discodeit/dto/ReadStatusDto.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/ReadStatusDto.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,57 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.Getter;
-import lombok.Setter;
-
-import java.time.ZonedDateTime;
-import java.util.UUID;
-
-
-public class ReadStatusDto {
-
-  @Getter
-  @Setter
-  @Builder(toBuilder = true)
-  @AllArgsConstructor
-  public static class Create {
-
-    @NotNull
-    private UUID channelId;
-    @NotNull
-    private UUID userId;
-  }
-
-  @Builder
-  @Getter
-  @Setter
-  public static class Update {
-
-    @NotNull
-    private UUID id;
-    @NotNull
-    private UUID lastReadMessageId;
-  }
-
-
-  @Getter
-  @Setter
-  @NotBlank
-  public static class ResponseReadStatus {
-
-    @NotNull
-    private UUID id;
-    @NotNull
-    private UUID channelId;
-    @NotNull
-    private UUID userId;
-    @NotNull
-    private UUID lastReadMessageId;
-    private ZonedDateTime createdAt;
-    private ZonedDateTime updatedAt;
-  }
-} 
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
deleted file mode 100644
--- a/build.gradle	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,59 +0,0 @@
-plugins {
-    id 'java'
-    id 'org.springframework.boot' version '3.3.1'
-    id 'io.spring.dependency-management' version '1.1.4'
-}
-
-group = 'com.sprint.mission.discodeit'
-version = '0.0.1-SNAPSHOT'
-
-java {
-    sourceCompatibility = JavaVersion.VERSION_17
-    targetCompatibility = JavaVersion.VERSION_17
-}
-
-tasks.withType(JavaCompile) {
-    options.encoding = 'UTF-8'
-    options.compilerArgs += ['-parameters']
-    options.release = 17
-}
-
-configurations {
-    compileOnly {
-        extendsFrom annotationProcessor
-    }
-}
-
-repositories {
-    mavenCentral()
-    maven { url 'https://repo.spring.io/milestone' }
-}
-sourceSets {
-    main {
-        java {
-            exclude '**/event/**'  // event 폴더 및 하위 모든 파일 제외
-        }
-    }
-}
-dependencies {
-    implementation 'org.springframework.boot:spring-boot-starter'
-    implementation 'org.springframework.boot:spring-boot-starter-web'
-    compileOnly 'org.projectlombok:lombok'
-    annotationProcessor 'org.projectlombok:lombok'
-    testImplementation 'org.springframework.boot:spring-boot-starter-test'
-    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
-    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
-    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
-    implementation 'org.springframework.boot:spring-boot-starter-validation'
-    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
-    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
-    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
-}
-
-tasks.named('test') {
-    useJUnitPlatform()
-    testLogging {
-        events "passed", "skipped", "failed"
-    }
-}
-
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserStatusService.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserStatusService.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserStatusService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/BasicUserStatusService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,89 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl;
-
-import com.sprint.mission.discodeit.dto.StatusDto;
-import com.sprint.mission.discodeit.entity.UserStatus;
-import com.sprint.mission.discodeit.exception.DataConflictException;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.mapping.UserStatusMapping;
-import com.sprint.mission.discodeit.service.UserStatusRepository;
-import com.sprint.mission.discodeit.service.UserStatusService;
-import com.sprint.mission.discodeit.util.StatusOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import java.time.ZonedDateTime;
-import java.util.*;
-@RequiredArgsConstructor
-@Service
-public class BasicUserStatusService implements UserStatusService {
-    private final UserStatusRepository userStatusRepository;
-
-
-    @Override
-    public boolean createUserStatus(UUID userId) {
-        userStatusRepository.findByUserId(userId)
-                .ifPresent(existing -> {
-                    throw new DataConflictException("UserStatus", "userId", userId);
-                });
-
-        UserStatus userStatus = new UserStatus(userId);
-        userStatusRepository.register(userStatus);
-        return true;
-    }
-
-    @Override
-    public StatusDto.StatusResponse updateUserStatus(UUID userId, StatusDto.StatusRequest statusDto) {
-        UserStatus userStatus = userStatusRepository.findByUserId(userId).orElseThrow(() -> new ResourceNotFoundException("UserStatus", "userId", userId));
-        try {
-            StatusOperation requestedStatus = StatusOperation.valueOf(statusDto.getStatus().toUpperCase());
-            userStatus.setStatus(requestedStatus);
-            return new StatusDto.StatusResponse(
-                    userId,
-                    requestedStatus
-            );
-        } catch (IllegalArgumentException e) {
-            throw new InvalidRequestException("잘못된 상태 변경");
-        }
-    }
-    
-    @Override
-    public List<StatusDto.Summary> findAllUsers() {
-        List<StatusDto.Summary> statusDtoList = new ArrayList<>();
-        
-        userStatusRepository.findAll().forEach(userStatus -> {
-            statusDtoList.add(UserStatusMapping.INSTANCE.userStatusToSummary(userStatus));
-        });
-        
-        return statusDtoList;
-    }
-    
-    @Override
-    public StatusDto.Summary findById(UUID userId) {
-        UserStatus userStatus = userStatusRepository.findByUserId(userId)
-            .orElseThrow(() -> new ResourceNotFoundException("UserStatus", "userId", userId));
-            
-        return UserStatusMapping.INSTANCE.userStatusToSummary(userStatus);
-    }
-    
-    @Override
-    public boolean deleteUserStatus(UUID userId) {
-        UserStatus userStatus = userStatusRepository.findByUserId(userId)
-            .orElseThrow(() -> new ResourceNotFoundException("UserStatus", "userId", userId));
-            
-        boolean success = userStatusRepository.delete(userId);
-        return success;
-    }
-    @Override
-    public void setUserOnline(UUID userId) {
-        UserStatus userStatus = userStatusRepository.findByUserId(userId)
-                .orElseThrow(() -> new ResourceNotFoundException("UserStatus", "userId", userId));
-        userStatus.setLastSeenAt(ZonedDateTime.now());
-        userStatus.setStatus(StatusOperation.ONLINE.ONLINE);
-
-        if (!userStatusRepository.update(userStatus)) {
-            throw new RuntimeException("업데이트 실패");
-        }
-    }
-
-}
Index: src/main/java/com/sprint/mission/discodeit/dto/common/UserData.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/UserData.java b/src/main/java/com/sprint/mission/discodeit/dto/common/UserData.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/UserData.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,14 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import java.util.*;
-
-public class UserData {
-
-  @NotNull
-  private UUID id;
-  @NotBlank
-  private String email;
-
-}
Index: src/main/java/com/sprint/mission/discodeit/entity/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/entity/Message.java b/src/main/java/com/sprint/mission/discodeit/entity/Message.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/entity/Message.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,64 +0,0 @@
-package com.sprint.mission.discodeit.entity;
-
-import lombok.Getter;
-import java.io.Serial;
-import java.io.Serializable;
-import java.time.ZonedDateTime;
-
-import java.util.HashSet;
-import java.util.Set;
-import java.util.UUID;
-
-@Getter
-public class Message implements Serializable {
-
-  @Serial
-  private static final long serialVersionUID = 103L; // 직렬화 버전 UID 유지
-
-  private final UUID id;
-  private final UUID channelId;
-  private final UUID authorId;
-  private String message;
-  private final ZonedDateTime createdAt;
-  private ZonedDateTime updateAt;
-  private final Set<UUID> attachmentIds = new HashSet<>();
-
-  public Message(UUID channelId, UUID authorId, String message) {
-    this.id = UUID.randomUUID();
-    this.channelId = channelId;
-    this.authorId = authorId;
-    this.createdAt = ZonedDateTime.now();
-    this.message = message;
-    this.updateAt = null; // 생성 시에는 수정 시간이 없음
-  }
-
-  // 첨부 파일 ID 추가
-  public void addAttachment(UUID attachmentId) {
-    if (attachmentId != null) {
-      if (this.attachmentIds.add(attachmentId)) { // 실제로 추가되었을 때만 시간 업데이트
-        setUpdateAt();
-      }
-    }
-  }
-
-  // 첨부 파일 ID 제거
-  public void removeAttachment(UUID attachmentId) {
-    if (attachmentId != null) {
-      if (this.attachmentIds.remove(attachmentId)) { // 실제로 제거되었을 때만 시간 업데이트
-        setUpdateAt();
-      }
-    }
-  }
-
-  // 메시지 내용 업데이트
-  public void updateMessage(String message) {
-    if (message != null && !message.equals(this.message)) { // 내용이 다를 경우에만 업데이트
-      this.message = message;
-      setUpdateAt();
-    }
-  }
-
-  public void setUpdateAt() {
-    this.updateAt = ZonedDateTime.now();
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/BinaryContentDto.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/BinaryContentDto.java b/src/main/java/com/sprint/mission/discodeit/dto/BinaryContentDto.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/BinaryContentDto.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,64 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import com.sprint.mission.discodeit.dto.common.CompositeIdentifier;
-import com.sprint.mission.discodeit.dto.common.FileMetadata;
-import com.sprint.mission.discodeit.dto.common.UserData;
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import lombok.Builder;
-import lombok.Getter;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.util.UUID;
-
-public class BinaryContentDto {
-
-  private FileMetadata fileMetadata;
-  private CompositeIdentifier compositeIdentifier;
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Upload { // 메타데이터 전용 DTO
-
-    @NotNull()
-    private final UUID ownerId;
-    @NotBlank()
-    private final String ownerType;
-    @NotBlank
-    private final MultipartFile file;
-    private final String fileName;
-    private final String contentType;
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Summary {
-
-    @NotNull
-    private UUID id;
-    @NotNull
-    private UUID ownerId;
-    @NotBlank
-    private String ownerType;
-    @NotBlank
-    private Long size;
-    @NotBlank
-    private String fileName;
-    @NotBlank
-    private String contentType;
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class DeleteResponse {
-
-    @NotNull
-    private UUID id;
-    @NotBlank
-    private String fileName;
-    @NotBlank
-    private boolean success;
-    private String message;
-  }
-}
-
Index: src/main/java/com/sprint/mission/discodeit/file/FileUserRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/file/FileUserRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/file/FileUserRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/file/FileUserRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,117 +0,0 @@
-package com.sprint.mission.discodeit.file;
-
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.service.UserRepository;
-import jakarta.annotation.PreDestroy;
-import org.springframework.stereotype.Repository;
-
-import java.io.*;
-import java.util.*;
-
-@Repository("fileUserRepositoryImplement")
-public class FileUserRepositoryImplement implements UserRepository {
-    private String dataDir;
-    private String userDataFile;
-    private final Map<UUID, User> userRepository;
-    
-    public FileUserRepositoryImplement() {
-        this.dataDir = "./data";  // 기본 경로를 프로젝트 루트 아래 data 폴더로 설정
-        this.userDataFile = "users.dat";
-        userRepository = loadData();
-        System.out.println("사용자 저장소 초기화 - 파일 경로: " + new File(dataDir, userDataFile).getAbsolutePath());
-    }
-    
-    public FileUserRepositoryImplement(String dataDir) {
-        this.dataDir = dataDir;
-        this.userDataFile = "users.dat";
-        userRepository = loadData();
-    }
-    
-    @SuppressWarnings("unchecked")
-    private Map<UUID, User> loadData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, userDataFile);
-        
-        if (file.exists()) {
-            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
-                return (Map<UUID, User>) in.readObject();
-            } catch (IOException | ClassNotFoundException e) {
-                System.err.println("파일 로드 오류: " + e.getMessage());
-                return new HashMap<>();
-            }
-        }
-        
-        return new HashMap<>();
-    }
-    
-    private synchronized void saveData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, userDataFile);
-        
-        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file))) {
-            out.writeObject(userRepository);
-            System.out.println("사용자 데이터가 저장되었습니다: " + file.getAbsolutePath());
-        } catch (IOException e) {
-            System.err.println("파일 저장 오류: " + e.getMessage());
-            throw new RuntimeException("사용자 데이터 저장 실패", e);
-        }
-    }
-
-    @Override
-    public Optional<User> findByUser(UUID userId) {
-        return Optional.ofNullable(userRepository.get(userId));
-    }
-
-    @Override
-    public boolean register(User user) {
-        userRepository.put(user.getId(), user);
-        saveData();
-        return true;
-    }
-
-    @Override
-    public boolean deleteUser(UUID userId) {
-        boolean removed = userRepository.remove(userId) != null;
-        if (removed) {
-            saveData();
-        }
-        return removed;
-    }
-
-    @Override
-    public Set<UUID> findAllUsers() {
-        return new HashSet<>(userRepository.keySet());
-    }
-    
-    @Override
-    public boolean updateUser(User user) {
-        if (user == null || !userRepository.containsKey(user.getId())) {
-            return false;
-        }
-        userRepository.put(user.getId(), user);
-        saveData();
-        return true;
-    }
-    
-    @Override
-    public Optional<User> findByEmail(String email) {
-        return userRepository.values().stream()
-                .filter(user -> user.getEmail() != null && user.getEmail().equals(email))
-                .findFirst();
-    }
-
-    // 애플리케이션 종료 시 데이터 저장 보장
-    @PreDestroy
-    public void saveDataOnShutdown() {
-        System.out.println("애플리케이션 종료 - 사용자 데이터 저장 중");
-        saveData();
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/mapping/FileMapping.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/mapping/FileMapping.java b/src/main/java/com/sprint/mission/discodeit/mapping/FileMapping.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/mapping/FileMapping.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,26 +0,0 @@
-package com.sprint.mission.discodeit.mapping;
-
-import com.sprint.mission.discodeit.config.CentralMapperConfig;
-import com.sprint.mission.discodeit.dto.BinaryContentDto;
-import com.sprint.mission.discodeit.entity.BinaryContent;
-import org.mapstruct.*;
-import org.mapstruct.factory.Mappers;
-
-
-@Mapper(config = CentralMapperConfig.class)
-public interface FileMapping {
-
-  @Mapping(target = "CompositeIdentifier.id", source = "id")
-  @Mapping(target = "CompositeIdentifier.ownerId", source = "ownerId")
-  @Mapping(target = "metadata.ownerType", source = "ownerType")
-  @Mapping(target = "metadata.size", source = "size")
-  @Mapping(target = "metadata.fileName", source = "fileName")
-  @Mapping(target = "metadata.contentType", source = "contentType")
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  BinaryContentDto.Summary binaryContentToSummary(BinaryContent binaryContent);
-
-  @Mapping(target = "fileName", source = "binaryContent.fileName")
-  @Mapping(target = "message", expression = "java(message)")
-  BinaryContentDto.DeleteResponse binaryContentToDeleteResponse(BinaryContent binaryContent,
-      @Context String message);
-}
Index: src/main/java/com/sprint/mission/discodeit/config/StorageConfig.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/config/StorageConfig.java b/src/main/java/com/sprint/mission/discodeit/config/StorageConfig.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/config/StorageConfig.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,30 +0,0 @@
-package com.sprint.mission.discodeit.config;
-
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import java.io.File;
-
-@Configuration
-public class StorageConfig {
-
-    @Value("${discodeit.storage.data-dir:data}")
-    private String dataDir;
-
-    @Bean
-    public String dataDir() {
-        // 데이터 저장 디렉토리 초기화
-        File dataDirFile = new File(dataDir);
-        if (!dataDirFile.exists()) {
-            boolean created = dataDirFile.mkdirs();
-            if (created) {
-                System.out.println("데이터 디렉토리 생성 성공: " + dataDirFile.getAbsolutePath());
-            } else {
-                System.err.println("데이터 디렉토리 생성 실패: " + dataDirFile.getAbsolutePath());
-            }
-        } else {
-            System.out.println("데이터 디렉토리 이미 존재함: " + dataDirFile.getAbsolutePath());
-        }
-        return dataDir;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/MessageService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/MessageService.java b/src/main/java/com/sprint/mission/discodeit/service/MessageService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/MessageService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,25 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.MessageDto;
-import org.springframework.beans.factory.annotation.Qualifier;
-
-import java.io.IOException;
-import java.util.List;
-import java.util.UUID;
-
-@Qualifier("BasicMessageService")
-public interface MessageService {
-
-  MessageDto.Response create(MessageDto.Create messageCreateDTO, UUID uuid) throws IOException;
-
-  MessageDto.Response findByMessage(UUID messageId);
-
-  List<MessageDto.Response> findAllMessage();
-
-  List<MessageDto.Response> findAllByChannelId(UUID channelId);
-
-  MessageDto.Response updateMessage(UUID messageId, MessageDto.Update messageUpdateDTO, UUID uuid)
-      throws IOException;
-
-  void deleteMessage(UUID messageId);
-}
Index: src/main/java/com/sprint/mission/discodeit/util/Jwt.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/util/Jwt.java b/src/main/java/com/sprint/mission/discodeit/util/Jwt.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/util/Jwt.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,45 +0,0 @@
-package com.sprint.mission.discodeit.util;
-
-import io.jsonwebtoken.security.Keys;
-import lombok.Builder;
-import lombok.Getter;
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
-import io.jsonwebtoken.Claims;
-
-import java.nio.charset.StandardCharsets;
-import java.util.Date;
-
-import java.util.*;
-@Builder(toBuilder = true)
-@Getter
-public class Jwt {
-    private static final String SECRET_KEY = "mySecretKey";
-    private static final long EXPIRATION_TIME = 86400000;
-
-    private Jwt() {
-    }
-
-    // JWT 생성 메서드
-    public static String generateToken(String userId) {
-        Date now = new Date();
-        Date expiryDate = new Date(now.getTime() + EXPIRATION_TIME);
-
-        return Jwts.builder()
-                .setSubject(userId)          // 토큰의 주체: 사용자 ID
-                .setIssuedAt(now)            // 발행 시간
-                .setExpiration(expiryDate)   // 만료 시간
-                .signWith(Keys.hmacShaKeyFor(SECRET_KEY.getBytes(StandardCharsets.UTF_8)), SignatureAlgorithm.HS256)
-                .compact();
-    }
-
-    // JWT 검증 메서드: 유효하면 사용자 ID(subject)를 반환
-    public static String validateToken(String token) {
-        Claims claims = Jwts.parser()  // Jwts.parser() 사용
-                .setSigningKey(Keys.hmacShaKeyFor(SECRET_KEY.getBytes(StandardCharsets.UTF_8)))  // 서명 키 설정
-                .parseClaimsJws(token)  // JWT 파싱
-                .getBody();  // Claims 객체 추출
-
-        return claims.getSubject();  // 사용자 ID(subject) 반환
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/entity/Channel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/entity/Channel.java b/src/main/java/com/sprint/mission/discodeit/entity/Channel.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/entity/Channel.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,110 +0,0 @@
-package com.sprint.mission.discodeit.entity;
-
-import com.sprint.mission.discodeit.service.ChannelType;
-import lombok.Getter;
-import org.springframework.boot.autoconfigure.domain.EntityScan;
-
-import java.io.Serial;
-import java.io.Serializable;
-import java.time.ZonedDateTime;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.UUID;
-
-@Getter
-public class Channel implements Serializable {
-
-  @Serial
-  private static final long serialVersionUID = 102L;
-  private final UUID channelId; // 채널 ID
-  private final ZonedDateTime createdAt; // 생성시간
-  private ZonedDateTime updateAt; // 업데이트 된 시간
-  private final UUID ownerId; // 채널 생성자의 아이디
-  private final Set<UUID> userList = new HashSet<>(); // 가입한 유저 리스트
-  private String channelName; //채널이름
-  private final String channelType; // 채널 타입 (PUBLIC/PRIVATE)
-  private String description; // 채널 설명 (PUBLIC)
-
-  // PUBLIC
-  public Channel(String channelName, UUID ownerId) {
-    this.createdAt = ZonedDateTime.now();
-    this.channelId = UUID.randomUUID();
-    this.channelName = channelName;
-    this.ownerId = ownerId;
-    this.channelType = ChannelType.PUBLIC;
-    userList.add(ownerId); // 생성자를 채널에 자동 추가
-  }
-
-  // PUBLIC
-  public Channel(String channelName, UUID ownerId, String description) {
-    this(channelName, ownerId);
-    this.description = description;
-  }
-
-  // PRIVATE 채널 생성자
-  public Channel(UUID ownerId, Set<UUID> participants) {
-    this.createdAt = ZonedDateTime.now();
-    this.channelId = UUID.randomUUID();
-    this.ownerId = ownerId;
-    this.channelType = ChannelType.PRIVATE;
-
-    // 참여자 추가
-    userList.add(ownerId);
-    if (participants != null) {
-      userList.addAll(participants);
-    }
-  }
-
-  // PRIVATE 채널 생성자 (이름 포함)
-  public Channel(String channelName, UUID ownerId, Set<UUID> participants) {
-    this(ownerId, participants);
-    this.channelName = channelName;
-  }
-
-  // 채널 참여
-  public void joinChannel(UUID userId) {
-    this.getUserList().add(userId);
-  }
-
-  // 채널 탈퇴
-  public void leaveChannel(UUID userId) {
-    this.getUserList().remove(userId);
-  }
-
-  // 채널명 변경
-  public void setChannelName(String newChannelName) {
-    this.channelName = newChannelName;
-    setUpdateAt();
-  }
-
-  // 설명 변경 (PUBLIC)
-  public void setDescription(String description) {
-    if (isPublic()) {
-      this.description = description;
-      setUpdateAt();
-    }
-  }
-
-  // 업데이트 시간 설정
-  public void setUpdateAt() {
-    updateAt = ZonedDateTime.now();
-  }
-
-  //    // 채널 타입 확인 메서드
-  public boolean isPrivate() {
-    return ChannelType.PRIVATE.equals(this.channelType);
-  }
-
-  public boolean isPublic() {
-    return ChannelType.PUBLIC.equals(this.channelType);
-  }
-
-
-  public UUID getId() {
-    return this.channelId;
-  }
-
-  public String getName() {
-    return this.channelName;
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/MessageEventListener.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/MessageEventListener.java b/src/main/java/com/sprint/mission/discodeit/event/MessageEventListener.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/MessageEventListener.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,43 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import com.sprint.mission.discodeit.entity.ReadStatus;
-import com.sprint.mission.discodeit.service.*;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.event.EventListener;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-import java.util.UUID;
-import java.util.stream.Collectors;
-
-@Component
-@RequiredArgsConstructor
-public class MessageEventListener {
-    private final ReadStatusRepository readStatusRepository;
-    private final BinaryContentRepository binaryContentRepository;
-    
-    @EventListener
-    public void handleMessageDeletedEvent(MessageDeletedEvent event) {
-        UUID messageId = event.getMessageId();
-        
-        // 메시지를 마지막으로 읽은 모든 ReadStatus 처리
-        List<ReadStatus> allReadStatuses = readStatusRepository.findAllByUserId(null).stream()
-            .filter(rs -> rs.getLastReadMessageId() != null && rs.getLastReadMessageId().equals(messageId))
-            .collect(Collectors.toList());
-            
-        for (ReadStatus status : allReadStatuses) {
-            // ReadStatus 엔티티의 메서드 활용
-            status.updateLastReadMessage(null);
-            readStatusRepository.updateReadStatus(status);
-        }
-        
-        // 메시지 관련 바이너리 콘텐츠 삭제
-        binaryContentRepository.delete(messageId);
-    }
-    
-    @EventListener
-    public void handleMessageCreatedEvent(MessageCreatedEvent event) {
-        // 새 메시지에 대한 읽음 상태 초기화 등의 작업
-        // 필요한 경우 구현
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/BinaryContentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/BinaryContentService.java b/src/main/java/com/sprint/mission/discodeit/service/BinaryContentService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/BinaryContentService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,32 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.BinaryContentDto;
-import com.sprint.mission.discodeit.entity.BinaryContent;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.*;
-import java.util.UUID;
-
-
-public interface BinaryContentService {
-
-
-  BinaryContentDto.Summary createBinaryContent(BinaryContentDto.Upload binaryContentDto)
-      throws IOException;
-
-  void writeFilesAsZip(List<UUID> ids, OutputStream os) throws IOException;
-
-  BinaryContentDto.Summary findBinaryContentSummary(UUID id);
-
-  List<BinaryContentDto.Summary> findBinaryContentSummariesByIds(List<UUID> ids);
-
-  BinaryContent getBinaryContentEntity(UUID id);
-
-  Optional<InputStream> getContentStream(UUID id) throws IOException;
-
-  void deleteBinaryContentByOwner(UUID ownerId);
-
-  List<BinaryContentDto.DeleteResponse> deleteBinaryContentsByIds(List<UUID> ids);
-}
Index: src/main/java/com/sprint/mission/discodeit/config/RepositoryConfig.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/config/RepositoryConfig.java b/src/main/java/com/sprint/mission/discodeit/config/RepositoryConfig.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/config/RepositoryConfig.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,75 +0,0 @@
-package com.sprint.mission.discodeit.config;
-
-import com.sprint.mission.discodeit.basic.repositoryimpl.*;
-import com.sprint.mission.discodeit.file.*;
-import com.sprint.mission.discodeit.service.*;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Primary;
-@Configuration
-public class RepositoryConfig {
-
-    @Value("${discodeit.storage.data-dir:data}")
-    private String dataDir;
-    @Bean
-    @Primary // FileUserRepositoryImplement를 기본 구현체로 사용
-    public UserRepository fileUserRepository() {
-        return new FileUserRepositoryImplement(dataDir);
-    }
-
-    @Bean
-    public UserRepository basicUserRepository() {
-        return new BasicUserRepositoryImplement(/* 필요한 파라미터 */); // 기본 구현체, 파라미터 전달
-    }
-
-    @Bean
-    @Primary // FileChannelRepositoryImplement를 기본 구현체로 사용
-    public ChannelRepository fileChannelRepository() {
-        return new FileChannelRepositoryImplement(dataDir);
-    }
-
-    @Bean
-    public ChannelRepository basicChannelRepository() {
-        return new BasicChannelRepositoryImplement();
-    }
-
-    @Bean
-    @Primary // FileMessageRepositoryImplement를 기본 구현체로 사용
-    public MessageRepository fileMessageRepository() {
-        return new FileMessageRepositoryImplement(dataDir);
-    }
-
-    @Bean
-    public MessageRepository basicMessageRepository() {
-        return new BasicMessageRepositoryImplement(); // 기본 구현체
-    }
-
-    @Bean
-    @Primary // FileReadStatusRepositoryImplement를 기본 구현체로 사용
-    public ReadStatusRepository fileReadStatusRepository() {
-        return new FileReadStatusRepositoryImplement(dataDir);
-    }
-
-    @Bean("basicReadStatusRepositoryImplement") // Bean 이름 수정
-    public ReadStatusRepository basicReadStatusRepository() {
-        return new BasicReadStatusRepositoryImplement(); // 기본 구현체
-    }
-
-
-    @Bean
-    public BinaryContentRepository basicBinaryContentRepository() {
-        return new BasicBinaryContentRepositoryImplement(); // 기본 구현체
-    }
-
-    @Bean
-    @Primary // FileUserStatusRepositoryImpl를 기본 구현체로 사용
-    public UserStatusRepository fileUserStatusRepository() {
-        return new FileUserStatusRepositoryImpl(dataDir);
-    }
-
-    @Bean
-    public UserStatusRepository basicUserStatusRepository() {
-        return new UserStatusRepositoryImplement(/* 필요한 파라미터 */); // 기본 구현체, 파라미터 전달
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/AuthServiceImp.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/AuthServiceImp.java b/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/AuthServiceImp.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/serviceimpl/AuthServiceImp.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,34 +0,0 @@
-package com.sprint.mission.discodeit.basic.serviceimpl;
-
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.exception.AuthException;
-import com.sprint.mission.discodeit.exception.ResourceNotFoundException;
-import com.sprint.mission.discodeit.service.AuthService;
-import com.sprint.mission.discodeit.service.UserRepository;
-import com.sprint.mission.discodeit.service.UserStatusService;
-import lombok.RequiredArgsConstructor;
-
-import org.springframework.stereotype.Service;
-import com.sprint.mission.discodeit.jwt.JwtUtil;
-@RequiredArgsConstructor
-@Service
-public class AuthServiceImp implements AuthService {
-    private final UserRepository userRepository;
-    private final UserStatusService userStatusService;
-    private final JwtUtil jwtUtil;
-
-
-    @Override
-    public String login(UserDto.Login loginDto) {
-        // 이메일과 비밀번호 검증
-        User user = userRepository.findByEmail(loginDto.getEmail())
-                .orElseThrow(() -> new ResourceNotFoundException("User", loginDto.getEmail(), "존재하지 않는 이메일입니다."));
-
-        if (!user.checkPassword(loginDto.getPassword())) {
-            throw new AuthException("이메일 또는 비밀번호가 일치하지 않습니다.");
-        }
-        userStatusService.setUserOnline(user.getId());
-        return jwtUtil.generateToken(String.valueOf(user.getId()));
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/file/FileBinaryContentRepositoryImpl.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/file/FileBinaryContentRepositoryImpl.java b/src/main/java/com/sprint/mission/discodeit/file/FileBinaryContentRepositoryImpl.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/file/FileBinaryContentRepositoryImpl.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,210 +0,0 @@
-package com.sprint.mission.discodeit.file;
-
-import com.sprint.mission.discodeit.entity.BinaryContent;
-import com.sprint.mission.discodeit.service.FileBinaryContentRepository;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Repository;
-import java.nio.file.*;
-import java.io.*;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.stream.Collectors;
-import jakarta.annotation.PostConstruct;
-import jakarta.annotation.PreDestroy;
-
-
-
-@Repository
-public class FileBinaryContentRepositoryImpl implements FileBinaryContentRepository { // 인터페이스 구현 가정
-
-
-    private final String dataDir;
-    private final String imageDir;
-
-    private final String metadataFileName = "binary_content.dat";
-
-    // 경로 Path 객체들
-    private final Path storagePath;        // 메타데이터 기본 디렉토리 Path
-    private final Path imageDirPath;       // 이미지 저장 디렉토리 Path
-    private final Path metadataFilePath;   // 메타데이터 파일 Path
-
-    private final Map<UUID, BinaryContent> binaryContentMetadataMap;
-
-    // 생성자에서 두 개의 경로 설정을 주입받음
-    public FileBinaryContentRepositoryImpl(
-            @Value("${discodeit.storage.data-dir}") String configuredDataDir,
-            @Value("${discodeit.storage.image-dir}") String configuredImageDir) {
-
-        this.dataDir = configuredDataDir;
-        this.imageDir = configuredImageDir;
-
-        // 각 경로 설정값을 기반으로 Path 객체 초기화
-        this.storagePath = Paths.get(this.dataDir);          // 메타데이터용
-        this.imageDirPath = Paths.get(this.imageDir);        // 이미지 저장용
-        this.metadataFilePath = this.storagePath.resolve(metadataFileName); // 메타데이터 파일은 storagePath 기준
-
-        System.out.println("메타데이터 기본 디렉토리 사용: " + this.storagePath.toAbsolutePath());
-        System.out.println("이미지 저장 디렉토리 사용: " + this.imageDirPath.toAbsolutePath()); // 수정된 이미지 경로 출력
-        System.out.println("메타데이터 파일 경로: " + this.metadataFilePath.toAbsolutePath());
-
-        this.binaryContentMetadataMap = loadMetadata();
-    }
-
-    @PostConstruct
-    public void initializeDirectories() {
-        try {
-            // 메타데이터 저장용 디렉토리 생성 (기존 storagePath 사용)
-            Files.createDirectories(storagePath);
-            System.out.println("메타데이터 디렉토리 확인/생성: " + storagePath.toAbsolutePath());
-
-            // 이미지 저장용 특정 디렉토리 생성 (새로운 imageDirPath 사용)
-            Files.createDirectories(imageDirPath);
-            System.out.println("이미지 디렉토리 확인/생성: " + imageDirPath.toAbsolutePath());
-        } catch (IOException e) {
-            System.err.println("디렉토리 생성 실패: " + e.getMessage());
-            throw new RuntimeException("스토리지 디렉토리 생성 실패", e);
-        }
-    }
-
-    // loadMetadata, saveMetadata는 metadataFilePath를 사용하므로 변경 불필요
-    @SuppressWarnings("unchecked")
-    private synchronized Map<UUID, BinaryContent> loadMetadata() {
-        System.out.println("메타데이터 로드 경로: " + metadataFilePath.toAbsolutePath());
-        if (Files.exists(metadataFilePath)) {
-            try (ObjectInputStream in = new ObjectInputStream(Files.newInputStream(metadataFilePath))) {
-                return new ConcurrentHashMap<>((Map<UUID, BinaryContent>) in.readObject());
-            } catch (IOException | ClassNotFoundException e) {
-                System.err.println("메타데이터 로드 실패: " + e.getMessage());
-                return new ConcurrentHashMap<>();
-            }
-        }
-        return new ConcurrentHashMap<>();
-    }
-
-    private synchronized void saveMetadata() {
-        System.out.println("메타데이터 저장 경로: " + metadataFilePath.toAbsolutePath());
-        try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(metadataFilePath))) {
-            out.writeObject(new HashMap<>(binaryContentMetadataMap));
-        } catch (IOException e) {
-            System.err.println("메타데이터 저장 실패: " + e.getMessage());
-        }
-    }
-
-
-    @Override
-    public BinaryContent store(InputStream inputStream, String contentType, String originalFileName,
-                               long size, UUID ownerId, String ownerType) throws IOException {
-
-        UUID generatedId = UUID.randomUUID();
-        String sanitizedFileName = sanitizeFileName(originalFileName);
-        String storedFileName = generatedId.toString() + "_" + sanitizedFileName;
-
-        // ★★★ 이미지 저장 경로를 imageDirPath 기준으로 변경 ★★★
-        Path targetFilePath = imageDirPath.resolve(storedFileName);
-        System.out.printf("이미지 파일 저장 시도: %s%n", targetFilePath.toAbsolutePath());
-
-        try {
-            Files.copy(inputStream, targetFilePath, StandardCopyOption.REPLACE_EXISTING);
-            System.out.printf("이미지 파일 저장 성공: %s%n", targetFilePath.toAbsolutePath());
-        } catch (IOException e) {
-            System.err.printf("이미지 파일 저장 실패: %s, Error: %s%n", targetFilePath.toAbsolutePath(), e.getMessage());
-            throw e;
-        }
-
-        BinaryContent metadata = new BinaryContent(
-                contentType,
-                originalFileName,
-                size,
-                ownerId,
-                ownerType,
-                targetFilePath.toString()
-        );
-
-        binaryContentMetadataMap.put(metadata.getId(), metadata);
-        saveMetadata(); // 메타데이터는 metadataFilePath에 저장됨
-
-        System.out.printf("컨텐츠 메타데이터 저장 완료: ID=%s%n", metadata.getId());
-        return metadata;
-    }
-
-    // findMetadataById 는 변경 불필요 (메모리 맵 사용)
-    @Override
-    public Optional<BinaryContent> findMetadataById(UUID id) {
-        return Optional.ofNullable(binaryContentMetadataMap.get(id));
-    }
-
-    // getContentStream 은 변경 불필요 (메타데이터의 filePath 사용)
-    @Override
-    public Optional<InputStream> getContentStream(UUID id) throws IOException {
-        Optional<BinaryContent> metadataOpt = findMetadataById(id);
-        if (metadataOpt.isPresent()) {
-            // 메타데이터에 저장된 파일 경로 사용
-            Path filePath = Paths.get(metadataOpt.get().getFilePath());
-            if (Files.exists(filePath)) {
-                return Optional.of(Files.newInputStream(filePath));
-            } else {
-                System.err.printf("메타데이터는 있으나 파일 없음: Path=%s%n", filePath);
-                return Optional.empty();
-            }
-        }
-        System.out.printf("스트림 요청: 메타데이터 없음: ID=%s%n", id);
-        return Optional.empty();
-    }
-
-    // deleteById 는 변경 불필요 (메타데이터의 filePath 사용)
-    @Override
-    public boolean deleteById(UUID id) {
-        BinaryContent removedMetadata = binaryContentMetadataMap.remove(id);
-        if (removedMetadata != null) {
-            System.out.printf("메타데이터 삭제됨: ID=%s%n", id);
-            // 메타데이터에 저장된 파일 경로 사용
-            Path filePath = Paths.get(removedMetadata.getFilePath());
-            try {
-                boolean fileDeleted = Files.deleteIfExists(filePath);
-                if (!fileDeleted) {
-                    System.err.printf("이미지 파일 삭제 실패 또는 파일 없음: Path=%s%n", filePath);
-                } else {
-                    System.out.printf("이미지 파일 삭제 성공: Path=%s%n", filePath);
-                }
-            } catch (IOException e) {
-                System.err.printf("이미지 파일 삭제 중 오류 발생: Path=%s, Error=%s%n", filePath, e.getMessage());
-            }
-            saveMetadata(); // 변경된 메타데이터 저장
-            return true;
-        }
-        System.out.printf("삭제 대상 메타데이터 없음: ID=%s%n", id);
-        return false;
-    }
-
-    // findAllMetadataByOwnerId, findMetadataByOwnerId, findAllIds 는 변경 불필요 (메모리 맵 사용)
-    @Override
-    public List<BinaryContent> findAllMetadataByOwnerId(UUID ownerId) {
-        return binaryContentMetadataMap.values().stream()
-                .filter(content -> content.getOwnerId() != null && content.getOwnerId().equals(ownerId))
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public Optional<BinaryContent> findMetadataByOwnerId(UUID ownerId) {
-        return binaryContentMetadataMap.values().stream()
-                .filter(content -> content.getOwnerId() != null && content.getOwnerId().equals(ownerId))
-                .findFirst();
-    }
-
-    @Override
-    public List<UUID> findAllIds() {
-        return new ArrayList<>(binaryContentMetadataMap.keySet());
-    }
-
-
-    @PreDestroy
-    public void saveDataOnShutdown() {
-        System.out.println("애플리케이션 종료 감지 - 바이너리 메타데이터 저장 실행");
-        saveMetadata();
-    }
-
-    private String sanitizeFileName(String fileName) {
-        if (fileName == null) return "unknown_file";
-        return fileName.replaceAll("[^a-zA-Z0-9.\\-_]", "_");
-    }
-}
Index: src/main/java/com/sprint/mission/discodeit/event/RemoveChannelFromUsersEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/RemoveChannelFromUsersEvent.java b/src/main/java/com/sprint/mission/discodeit/event/RemoveChannelFromUsersEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/RemoveChannelFromUsersEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class RemoveChannelFromUsersEvent {
-    private final UUID channelId;
-    
-    public RemoveChannelFromUsersEvent(UUID channelId) {
-        this.channelId = channelId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEventListener.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEventListener.java b/src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEventListener.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEventListener.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,32 +0,0 @@
-//package com.sprint.mission.discodeit.event;
-//
-//import com.sprint.mission.discodeit.entity.Channel;
-//import com.sprint.mission.discodeit.entity.User;
-//import com.sprint.mission.discodeit.service.ChannelRepository;
-//import com.sprint.mission.discodeit.service.UserRepository;
-//import lombok.RequiredArgsConstructor;
-//import org.springframework.context.event.EventListener;
-//import org.springframework.stereotype.Component;
-//
-//import java.util.List;
-//import java.util.UUID;
-//
-//@Component
-//@RequiredArgsConstructor
-//public class ChannelDeletedEventListener {
-//    private final UserRepository userRepository;
-//    private final ChannelRepository channelRepository;
-//
-//    @EventListener
-//    public void handleChannelDeletedEvent(ChannelDeletedEvent event) {
-//        Channel channel = channelRepository.findById(event.getChannelId()).orElse(null);
-//        if (channel == null) return;
-//        List<UUID> userIds = channel.getUserList().stream().toList();
-//        channelRepository.deleteChannel(event.getChannelId());
-//        // 모든 사용자의 채널 목록에서 해당 채널 제거
-//        for (UUID userId : userIds) {
-//            userRepository.findByUser(userId)
-//                    .ifPresent(user -> user.removeBelongChannel(event.getChannelId()));
-//        }
-//    }
-//}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/DeleteChannelMessagesEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/DeleteChannelMessagesEvent.java b/src/main/java/com/sprint/mission/discodeit/event/DeleteChannelMessagesEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/DeleteChannelMessagesEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class DeleteChannelMessagesEvent {
-    private final UUID channelId;
-    
-    public DeleteChannelMessagesEvent(UUID channelId) {
-        this.channelId = channelId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/controller/ReadStatusController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/controller/ReadStatusController.java b/src/main/java/com/sprint/mission/discodeit/controller/ReadStatusController.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/controller/ReadStatusController.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,54 +0,0 @@
-package com.sprint.mission.discodeit.controller;
-
-
-import com.sprint.mission.discodeit.dto.ReadStatusDto;
-import com.sprint.mission.discodeit.jwt.RequiresAuth;
-import com.sprint.mission.discodeit.service.ReadStatusService;
-import jakarta.validation.Valid;
-import java.util.List;
-import java.util.UUID;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.PutMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-@RestController
-@RequestMapping("/read-status") // API 기본 경로 설정
-@RequiredArgsConstructor
-public class ReadStatusController {
-
-
-  private final ReadStatusService readStatusService;
-
-  @RequiresAuth
-  @PostMapping("/create")
-  public ResponseEntity<ReadStatusDto.ResponseReadStatus> createReceptionStatus(
-      @RequestBody ReadStatusDto.Create request) {
-
-    return ResponseEntity.ok(readStatusService.create(request));
-  }
-
-  @RequiresAuth
-  @PutMapping("/update/{readStatusId}")
-  public ResponseEntity<ReadStatusDto.ResponseReadStatus> updateReceptionStatus(
-      @PathVariable UUID readStatusId,
-      @Valid @RequestBody ReadStatusDto.Update request) {
-
-    ReadStatusDto.ResponseReadStatus response = readStatusService.update(readStatusId, request);
-    return ResponseEntity.ok(response);
-  }
-
-  @GetMapping("/{userId}")
-  public ResponseEntity<List<ReadStatusDto.ResponseReadStatus>> getUserReceptionStatuses(
-      @PathVariable UUID userId) {
-
-    return ResponseEntity.ok(readStatusService.findAllByUserId(userId));
-  }
-
-
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/event/UserDeletedEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/UserDeletedEvent.java b/src/main/java/com/sprint/mission/discodeit/event/UserDeletedEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/UserDeletedEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-package com.sprint.mission.discodeit.event;
-
-import lombok.Getter;
-import java.util.UUID;
-
-@Getter
-public class UserDeletedEvent {
-    private final UUID userId;
-    
-    public UserDeletedEvent(UUID userId) {
-        this.userId = userId;
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/ChannelType.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/ChannelType.java b/src/main/java/com/sprint/mission/discodeit/service/ChannelType.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/ChannelType.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,9 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import java.util.*;
-
-public interface ChannelType {
-    String PUBLIC = "PUBLIC";
-    String PRIVATE = "PRIVATE";
-    }
-
Index: src/main/java/com/sprint/mission/discodeit/dto/ChannelDto.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/ChannelDto.java b/src/main/java/com/sprint/mission/discodeit/dto/ChannelDto.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/ChannelDto.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,124 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import com.sprint.mission.discodeit.dto.common.ChannelInfo;
-import com.sprint.mission.discodeit.dto.common.CompositeIdentifier;
-import com.sprint.mission.discodeit.dto.common.TimeStamps;
-import com.sprint.mission.discodeit.dto.common.UserChannels;
-import com.sprint.mission.discodeit.entity.Channel;
-import com.sprint.mission.discodeit.entity.ReadStatus;
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import lombok.*;
-import java.time.ZonedDateTime;
-import java.util.Set;
-import java.util.UUID;
-
-
-//채널 DTO
-public class ChannelDto {
-
-  private CompositeIdentifier compositeIdentifier;
-  private TimeStamps timeStamps;
-  private UserChannels userChannels;
-  private ChannelInfo channelInfo;
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class CreatePublic {
-
-    @NotNull
-    private UUID ownerId;
-    @NotBlank
-    private String channelName;
-    private String description;
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class CreatePrivate {
-
-    @NotNull
-    private UUID ownerId;
-    @NotNull
-    private Set<UUID> participantIds;
-    @NotBlank
-    private String channelName;
-  }
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Update {
-
-    @NotNull
-    private UUID channelId;
-    @NotNull
-    private UUID ownerId;
-    private String channelName;
-    private String description;
-  }
-
-  @Data
-  @Builder
-  @NoArgsConstructor
-  @AllArgsConstructor
-  public static class Response {
-
-    @NotNull
-    private UUID channelId;
-    @NotNull
-    private UUID ownerId;
-    @NotBlank
-    private String channelName;
-    @NotNull
-    private String channelType;
-    private String description;
-    @NotBlank
-    private ZonedDateTime lastMessageTime;
-    @NotNull
-    private Set<UUID> userList;
-  }
-
-
-  @Getter
-  @Builder(toBuilder = true)
-  public static class Summary {
-
-    @NotNull
-    private final UUID channelId;
-    @NotNull
-    private final UUID ownerId;
-    @NotBlank
-    private final String channelName;
-    @NotNull// 채널 이름
-    private final String channelType;
-    // 참여자 수
-    private final ZonedDateTime lastMessageAt; // 최근 메시지 시간
-    @NotNull
-    private final Set<UUID> userList;
-    @NotNull
-    private final int participantCount;
-    private final ZonedDateTime createdAt;
-    private final ZonedDateTime updatedAt;
-
-    public static Summary from(Channel channel, ReadStatus readStatus) {
-      SummaryBuilder builder = Summary.builder()
-          .channelId(channel.getChannelId())
-          .channelName(channel.getChannelName())
-          .channelType(channel.getChannelType())
-          .participantCount(channel.getUserList().size());
-
-      // PRIVATE:참여자 목록 포함
-      if (channel.isPrivate()) {
-        builder.userList(channel.getUserList());
-      }
-      // 마지막 메시지 시간 정보 포함
-      if (readStatus.getLastReadAt() != null) {
-        builder.lastMessageAt(readStatus.getLastReadAt());
-      }
-      return builder.build();
-    }
-  }
-
-
-}
-
Index: src/main/java/com/sprint/mission/discodeit/config/CentralMapperConfig.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/config/CentralMapperConfig.java b/src/main/java/com/sprint/mission/discodeit/config/CentralMapperConfig.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/config/CentralMapperConfig.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-package com.sprint.mission.discodeit.config;
-
-import org.mapstruct.MapperConfig;
-import org.mapstruct.ReportingPolicy;
-
-
-@MapperConfig(
-    componentModel = "spring",
-    unmappedTargetPolicy = ReportingPolicy.IGNORE
-)
-public interface CentralMapperConfig {
-}
-
Index: src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEvent.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEvent.java b/src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEvent.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/event/ChannelDeletedEvent.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,13 +0,0 @@
-//package com.sprint.mission.discodeit.event;
-//
-//import lombok.Getter;
-//import java.util.UUID;
-//
-//@Getter
-//public class ChannelDeletedEvent {
-//    private final UUID channelId;
-//
-//    public ChannelDeletedEvent(UUID channelId) {
-//        this.channelId = channelId;
-//    }
-//}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/AuthService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/AuthService.java b/src/main/java/com/sprint/mission/discodeit/service/AuthService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/AuthService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,9 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.exception.InvalidRequestException;
-
-public interface AuthService { ;
-
-    String login(UserDto.Login loginDto) throws InvalidRequestException;
-}
Index: src/main/java/com/sprint/mission/discodeit/jwt/JwtAuthInterceptor.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/jwt/JwtAuthInterceptor.java b/src/main/java/com/sprint/mission/discodeit/jwt/JwtAuthInterceptor.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/jwt/JwtAuthInterceptor.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,130 +0,0 @@
-package com.sprint.mission.discodeit.jwt;
-
-import com.sprint.mission.discodeit.service.UserService;
-import io.jsonwebtoken.ExpiredJwtException; // jwt 라이브러리에 따른 예외 예시
-import io.jsonwebtoken.MalformedJwtException; // jwt 라이브러리에 따른 예외 예시
-import io.jsonwebtoken.SignatureException; // jwt 라이브러리에 따른 예외 예시
-import io.jsonwebtoken.UnsupportedJwtException; // jwt 라이브러리에 따른 예외 예시
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.HttpStatus;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.web.method.HandlerMethod;
-import org.springframework.web.servlet.HandlerInterceptor;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-
-@Component
-@RequiredArgsConstructor
-public class JwtAuthInterceptor implements HandlerInterceptor {
-
-  private static final Logger log = LoggerFactory.getLogger(JwtAuthInterceptor.class);
-  private static final String UNAUTHORIZED_ERROR_MESSAGE = "{\"error\":\"Authentication failed\"}"; // 통일된 에러 메시지
-
-  private final JwtUtil jwtUtil;
-  private final UserService userService;
-
-  @Override
-  public boolean preHandle(
-      @NonNull HttpServletRequest request,
-      @NonNull HttpServletResponse response,
-      @NonNull Object handler
-  ) throws Exception {
-    // 핸들러가 컨트롤러 메소드가 아닌 경우 (정적 리소스 등) 통과
-    if (!(handler instanceof HandlerMethod handlerMethod)) {
-      return true;
-    }
-
-    // 메소드나 클래스에 @RequiresAuth 어노테이션이 있는지 확인
-    RequiresAuth methodAnnotation = handlerMethod.getMethodAnnotation(RequiresAuth.class);
-    RequiresAuth classAnnotation = handlerMethod.getBeanType().getAnnotation(RequiresAuth.class);
-
-    // 어노테이션이 없으면 인증 불필요 (통과)
-    if (methodAnnotation == null && classAnnotation == null) {
-      return true;
-    }
-
-    // --- 인증 처리 시작 ---
-    final String authorizationHeader = request.getHeader("Authorization");
-    String jwt = null;
-
-    // 1. 헤더 및 Bearer 토큰 형식 확인
-    if (authorizationHeader != null && authorizationHeader.startsWith("Bearer ")) {
-      jwt = authorizationHeader.substring(7);
-      log.debug("Extracted JWT: {}", jwt);
-    } else {
-      log.warn("Authorization header is missing or does not start with Bearer");
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    }
-
-    try {
-      // 2. JWT 유효성 검증 (서명, 만료 시간 등)
-      jwtUtil.validateToken(jwt); // 실패 시 예외 발생을 가정
-      log.debug("JWT validation successful (signature, expiration)");
-
-      // 3. 유효한 토큰에서 사용자 ID 추출
-      String userId = jwtUtil.extractUserId(jwt); // 유효성 검증 후 추출 시도
-      log.debug("Extracted userId: {}", userId);
-
-      // userId가 null이거나 비어있는 경우 처리
-      if (userId == null || userId.trim().isEmpty()) {
-        log.warn("User ID extracted from token is null or empty");
-        sendUnauthorizedResponse(response); // 통일된 응답 전송
-        return false;
-      }
-
-      // 4. 사용자 존재 여부 확인
-      boolean userExists = userService.existsById(userId);
-      log.debug("Does user {} exist? {}", userId, userExists);
-
-      if (userExists) {
-        // 5. 인증 성공: 요청 속성에 userId 저장하고 계속 진행
-        request.setAttribute("userId", userId);
-        log.debug("Set request attribute 'userId': {}", userId);
-        return true;
-      } else {
-        // 4-1. 사용자가 존재하지 않음
-        log.warn("User ID {} from token does not exist", userId);
-        sendUnauthorizedResponse(response);
-        return false;
-      }
-
-    } catch (ExpiredJwtException e) {
-      log.warn("JWT validation failed: Token expired - {}", e.getMessage());
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    } catch (SignatureException e) {
-      log.warn("JWT validation failed: Invalid signature - {}", e.getMessage());
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    } catch (MalformedJwtException e) {
-      log.warn("JWT validation failed: Malformed token - {}", e.getMessage());
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    } catch (UnsupportedJwtException e) {
-      log.warn("JWT validation failed: Unsupported token - {}", e.getMessage());
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    } catch (IllegalArgumentException e) {
-      log.warn("JWT validation failed: Invalid claim or argument - {}", e.getMessage());
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    } catch (Exception e) { // 그 외 예상치 못한 예외
-      log.error("Unexpected error during JWT authentication", e);
-      sendUnauthorizedResponse(response); // 통일된 응답 전송
-      return false;
-    }
-  }
-
-  private void sendUnauthorizedResponse(HttpServletResponse response) throws IOException {
-    response.setStatus(HttpStatus.UNAUTHORIZED.value());
-    response.setContentType("application/json");
-    response.setCharacterEncoding("UTF-8");
-    response.getWriter().write(UNAUTHORIZED_ERROR_MESSAGE); // 미리 정의된 통일된 메시지 사용
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/MessageDto.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/MessageDto.java b/src/main/java/com/sprint/mission/discodeit/dto/MessageDto.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/MessageDto.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,91 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import com.sprint.mission.discodeit.util.UpdateOperation;
-import com.sprint.mission.discodeit.entity.Message;
-import jakarta.validation.constraints.NotBlank;
-import jakarta.validation.constraints.NotNull;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import java.time.ZonedDateTime;
-import java.util.List;
-import java.util.UUID;
-
-public class MessageDto {
-
-  @Data
-  @Builder
-  @NoArgsConstructor
-  @AllArgsConstructor
-  public static class Create {
-
-    @NotNull
-    private UUID channelId;
-    @NotBlank
-    private String message;
-    private List<UUID> binaryContents;
-  }
-
-  @Data
-  @Builder
-  @NoArgsConstructor
-  @AllArgsConstructor
-  public static class Update {
-
-    @NotNull
-    private UUID id;
-    private String message;
-    private List<UUID> binaryContents;
-    private UpdateOperation operation;
-  }
-
-  @Data
-  @Builder
-  @NoArgsConstructor
-  @AllArgsConstructor
-  public static class Response {
-
-    @NotNull
-    private UUID id;
-    @NotNull
-    private UUID channelId;
-    @NotNull
-    private UUID authorId;
-    private String message;
-    private ZonedDateTime createdAt;
-    private ZonedDateTime updateAt;
-    private List<UUID> binaryContentIds;
-  }
-
-  @Data
-  @Builder
-  @NoArgsConstructor
-  @AllArgsConstructor
-
-  public static class Summary {
-
-    @NotNull
-    private UUID id;
-    @NotNull
-    private UUID channelId;
-    @NotNull
-    private UUID authorId;           // 발신자
-    @NotBlank
-    private String message;          // 메시지 내용
-    private ZonedDateTime createdAt; // 생성 시간
-    @NotNull
-    private boolean hasAttachments;  // 첨부파일 유무
-
-    public static Summary from(Message message, boolean hasAttachments) {
-      return Summary.builder()
-          .id(message.getId())
-          .authorId(message.getAuthorId())
-          .message(message.getMessage())
-          .createdAt(message.getCreatedAt())
-          .hasAttachments(hasAttachments)
-          .build();
-    }
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicChannelRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicChannelRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicChannelRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicChannelRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,56 +0,0 @@
-package com.sprint.mission.discodeit.basic.repositoryimpl;
-
-import com.sprint.mission.discodeit.entity.Channel;
-import com.sprint.mission.discodeit.service.ChannelRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.*;
-
-
-public class BasicChannelRepositoryImplement implements ChannelRepository {
-    // 채널 id/채널
-    private final Map<UUID, Channel> channelRepository = new HashMap<>();
-
-    @Override
-    public boolean register(Channel channel) {
-        channelRepository.put(channel.getChannelId(), channel);
-        return true;
-    }
-
-    @Override
-    public Set<UUID> allChannelIdList() {
-        return new HashSet<>(channelRepository.keySet());
-    }
-    
-    @Override
-    public Optional<Channel> findById(UUID channelId) {
-        return Optional.ofNullable(channelRepository.get(channelId));
-    }
-
-    @Override
-    public Optional<String> findChannelNameById(UUID channelId) {
-        Channel channel = channelRepository.get(channelId);
-        return channel != null ? Optional.of(channel.getName()) : Optional.empty();
-    }
-
-    @Override
-    public Optional<Channel> findByName(String name) {
-        return channelRepository.values().stream()
-                .filter(channel -> channel.getName().equals(name))
-                .findFirst();
-    }
-
-    @Override
-    public boolean deleteChannel(UUID channelId) {
-        return channelRepository.remove(channelId) != null;
-    }
-
-    @Override
-    public boolean updateChannel(Channel channel) {
-        if(channelRepository.containsKey(channel.getChannelId())) {
-            channelRepository.put(channel.getChannelId(), channel);
-            return true;
-        }
-        return false;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/FileBinaryContentRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/FileBinaryContentRepository.java b/src/main/java/com/sprint/mission/discodeit/service/FileBinaryContentRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/FileBinaryContentRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,25 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.entity.BinaryContent;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Optional;
-import java.util.*;
-import java.util.UUID;
-public interface FileBinaryContentRepository {
-        BinaryContent store(InputStream inputStream, String contentType, String originalFileName, long size, UUID ownerId, String ownerType) throws IOException;
-
-        Optional<BinaryContent> findMetadataById(UUID id);
-
-        Optional<InputStream> getContentStream(UUID id) throws IOException;
-
-        boolean deleteById(UUID id);
-
-        List<BinaryContent> findAllMetadataByOwnerId(UUID ownerId);
-
-        Optional<BinaryContent> findMetadataByOwnerId(UUID ownerId);
-
-        List<UUID> findAllIds();
-
-}
Index: src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicBinaryContentRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicBinaryContentRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicBinaryContentRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicBinaryContentRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,60 +0,0 @@
-package com.sprint.mission.discodeit.basic.repositoryimpl;
-
-import com.sprint.mission.discodeit.entity.BinaryContent;
-import com.sprint.mission.discodeit.service.BinaryContentRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.*;
-import java.util.stream.Collectors;
-
-
-public class BasicBinaryContentRepositoryImplement implements BinaryContentRepository {
-    private final Map<UUID, BinaryContent> binaryContentMap = new HashMap<>();
-    
-    @Override
-    public boolean register(BinaryContent binaryContent) {
-        binaryContentMap.put(binaryContent.getId(), binaryContent);
-        return true;
-    }
-
-    @Override
-    public boolean update(BinaryContent binaryContent) {
-        if (binaryContentMap.containsKey(binaryContent.getId())) {
-            binaryContentMap.put(binaryContent.getId(), binaryContent);
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean delete(BinaryContent binaryContent) {
-        return binaryContentMap.remove(binaryContent.getId()) != null;
-    }
-
-    @Override
-    public List<UUID> findAll() {
-        return new ArrayList<>(binaryContentMap.keySet());
-    }
-
-    @Override
-    public List<BinaryContent> findAllByOwnerId(UUID ownerId) {
-        return binaryContentMap.values().stream()
-                .filter(content -> content.getOwnerId().equals(ownerId))
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    public boolean delete(UUID id) {
-        return binaryContentMap.remove(id) != null;
-    }
-
-    @Override
-    public Optional<BinaryContent> findByOwnerId(UUID ownerId) {
-        return binaryContentMap.values().stream().filter(content -> content.getOwnerId().equals(ownerId)).findFirst();
-    }
-
-    @Override
-    public Optional<BinaryContent> findById(UUID id) {
-        return Optional.ofNullable(binaryContentMap.get(id));
-    }
-}
Index: src/main/java/com/sprint/mission/discodeit/service/ReadStatusRepository.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/ReadStatusRepository.java b/src/main/java/com/sprint/mission/discodeit/service/ReadStatusRepository.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/ReadStatusRepository.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,19 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.entity.ReadStatus;
-
-import java.util.List;
-import java.util.Optional;
-import java.util.UUID;
-
-public interface ReadStatusRepository {
-    boolean register(ReadStatus readStatus);
-    Optional<ReadStatus> findById(UUID id);
-    List<ReadStatus> findAll();
-    List<ReadStatus> findAllByUserId(UUID userId);
-    Optional<ReadStatus> findByUserIdAndChannelId(UUID userId, UUID channelId);
-    boolean updateReadStatus(ReadStatus readStatus);
-    boolean deleteReadStatus(UUID id);
-    boolean deleteAllByChannelId(UUID channelId);
-    boolean deleteAllByUserId(UUID userId);
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/controller/BinaryContentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/controller/BinaryContentController.java b/src/main/java/com/sprint/mission/discodeit/controller/BinaryContentController.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/controller/BinaryContentController.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,118 +0,0 @@
-package com.sprint.mission.discodeit.controller;
-
-import com.sprint.mission.discodeit.dto.BinaryContentDto;
-import com.sprint.mission.discodeit.entity.BinaryContent;
-import com.sprint.mission.discodeit.jwt.RequiresAuth;
-import com.sprint.mission.discodeit.service.BinaryContentService;
-import jakarta.servlet.http.HttpServletResponse;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
-import java.util.List;
-import java.util.Optional;
-import java.util.UUID;
-import lombok.RequiredArgsConstructor;
-import org.springframework.core.io.InputStreamResource;
-import org.springframework.core.io.Resource;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.DeleteMapping;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
-import org.springframework.web.bind.annotation.RequestPart;
-import org.springframework.web.bind.annotation.RestController;
-import org.springframework.web.multipart.MultipartFile;
-import org.springframework.web.util.UriUtils;
-
-
-@RestController
-@RequestMapping("/binary-contents")
-@RequiredArgsConstructor
-public class BinaryContentController {
-
-  private final BinaryContentService binaryContentService;
-
-  @RequiresAuth
-  @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
-  public ResponseEntity<BinaryContentDto.Summary> uploadBinaryContent(
-      @RequestParam("ownerId") UUID ownerId,
-      @RequestParam("ownerType") String ownerType,
-      @RequestPart("file") MultipartFile file) throws IOException {
-
-    BinaryContentDto.Upload uploadDto = BinaryContentDto.Upload.builder()
-        .ownerId(ownerId)
-        .ownerType(ownerType)
-        .file(file)
-        .build();
-
-    BinaryContentDto.Summary summary = binaryContentService.createBinaryContent(uploadDto);
-
-    return ResponseEntity.ok(summary);
-  }
-
-  @RequiresAuth
-  @GetMapping("/{contentId}")
-  public ResponseEntity<Resource> downloadBinaryContent(@PathVariable UUID contentId)
-      throws IOException {
-
-    BinaryContent metadata = binaryContentService.getBinaryContentEntity(contentId);
-    Optional<InputStream> streamOpt = binaryContentService.getContentStream(contentId);
-    InputStreamResource resource = new InputStreamResource(streamOpt.get());
-    String encodedFileName = UriUtils.encode(metadata.getFileName(), StandardCharsets.UTF_8);
-    String contentDisposition = "attachment; filename*=UTF-8''" + encodedFileName;
-    return ResponseEntity.ok()
-        .contentType(MediaType.parseMediaType(metadata.getContentType()))
-        .header(HttpHeaders.CONTENT_DISPOSITION, contentDisposition)
-        .contentLength(metadata.getSize())
-        .body(resource);
-  }
-
-  @RequiresAuth
-  @GetMapping("/download-archive")
-  public void downloadFilesAsZip(
-      @RequestParam List<UUID> ids,
-      HttpServletResponse response) throws IOException {
-
-    String zipFileName = "download_" + System.currentTimeMillis() + ".zip";
-    String encodedZipFileName = UriUtils.encode(zipFileName, StandardCharsets.UTF_8);
-    String contentDisposition = "attachment; filename*=UTF-8''" + encodedZipFileName;
-
-    response.setContentType("application/zip");
-    response.setHeader(HttpHeaders.CONTENT_DISPOSITION, contentDisposition);
-
-    binaryContentService.writeFilesAsZip(ids, response.getOutputStream());
-  }
-
-
-  @GetMapping("/summaries")
-  public ResponseEntity<List<BinaryContentDto.Summary>> downloadBinaryContents(
-      @RequestParam List<UUID> ids) {
-
-    List<BinaryContentDto.Summary> summaries;
-    summaries = binaryContentService.findBinaryContentSummariesByIds(ids);
-
-    return ResponseEntity.ok(summaries);
-  }
-
-
-  @RequiresAuth
-  @DeleteMapping()
-  public ResponseEntity<List<BinaryContentDto.DeleteResponse>> deleteBinaryContentsByIds(
-      @RequestParam List<UUID> ids) {
-
-    List<BinaryContentDto.DeleteResponse> results = binaryContentService.deleteBinaryContentsByIds(
-        ids);
-    return ResponseEntity.ok(results);
-  }
-
-  @RequiresAuth
-  @DeleteMapping("/delete/{ownerId}")
-  public ResponseEntity<Void> deleteBinaryContentsByOwner(@PathVariable UUID ownerId) {
-    binaryContentService.deleteBinaryContentByOwner(ownerId);
-    return ResponseEntity.noContent().build();
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/dto/ErrorResponse.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/ErrorResponse.java b/src/main/java/com/sprint/mission/discodeit/dto/ErrorResponse.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/ErrorResponse.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,68 +0,0 @@
-package com.sprint.mission.discodeit.dto;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import java.time.ZonedDateTime;
-import lombok.Data;
-
-@Data
-@JsonInclude(JsonInclude.Include.NON_NULL)
-public class ErrorResponse {
-
-  private final String error;
-  private final int status;
-  private final String code;
-  private final String message;
-  private final Object details;
-  private final ZonedDateTime timestamp;
-
-  private ErrorResponse(Builder builder) {
-    this.error = builder.error;
-    this.status = builder.status;
-    this.code = builder.code;
-    this.message = builder.message;
-    this.details = builder.details;
-    this.timestamp = ZonedDateTime.now();
-  }
-
-  public static Builder builder() {
-    return new Builder();
-  }
-
-  public static class Builder {
-
-    private String error;
-    private int status;
-    private String code;
-    private String message;
-    private Object details;
-
-    public Builder error(String error) {
-      this.error = error;
-      return this;
-    }
-
-    public Builder status(int status) {
-      this.status = status;
-      return this;
-    }
-
-    public Builder code(String code) {
-      this.code = code;
-      return this;
-    }
-
-    public Builder message(String message) {
-      this.message = message;
-      return this;
-    }
-
-    public Builder details(Object details) {
-      this.details = details;
-      return this;
-    }
-
-    public ErrorResponse build() {
-      return new ErrorResponse(this);
-    }
-  }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicMessageRepositoryImplement.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicMessageRepositoryImplement.java b/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicMessageRepositoryImplement.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/basic/repositoryimpl/BasicMessageRepositoryImplement.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,67 +0,0 @@
-package com.sprint.mission.discodeit.basic.repositoryimpl;
-
-import com.sprint.mission.discodeit.entity.Message;
-import com.sprint.mission.discodeit.service.MessageRepository;
-import org.springframework.stereotype.Repository;
-
-import java.util.*;
-import java.util.stream.Collectors;
-
-
-public class BasicMessageRepositoryImplement implements MessageRepository {
-    private final Map<UUID, Message> messageRepository = new HashMap<>();
-
-    @Override
-    public boolean register(Message message) {
-        messageRepository.put(message.getId(), message);
-        return true;
-    }
-    
-    @Override
-    public Optional<Message> findById(UUID messageId) {
-        return Optional.ofNullable(messageRepository.get(messageId));
-    }
-
-    @Override
-    public List<Message> findAll() {
-        return new ArrayList<>(messageRepository.values());
-    }
-
-    @Override
-    public boolean deleteMessage(UUID messageId) {
-        return messageRepository.remove(messageId) != null;
-    }
-
-
-    @Override
-    public boolean updateMessage(Message message) {
-        if (messageRepository.containsKey(message.getId())) {
-            messageRepository.put(message.getId(), message);
-            return true;
-        }
-        return false;
-    }
-
-
-    @Override
-    public List<Message> findAllByChannelId(UUID channelId) {
-        if (channelId == null) {
-            throw new IllegalArgumentException("Channel ID cannot be null");
-        }
-        
-        return messageRepository.values().stream()
-            .filter(message -> channelId.equals(message.getChannelId()))
-            .collect(Collectors.toList());
-    }
-
-    @Override
-    public List<Message> findAllByAuthorId(UUID authorId) {
-        if (authorId == null) {
-            throw new IllegalArgumentException("Author ID cannot be null");
-        }
-        
-        return messageRepository.values().stream()
-            .filter(message -> authorId.equals(message.getAuthorId()))
-            .collect(Collectors.toList());
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/entity/User.java b/src/main/java/com/sprint/mission/discodeit/entity/User.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/entity/User.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,70 +0,0 @@
-package com.sprint.mission.discodeit.entity;
-
-import lombok.Getter;
-import org.springframework.boot.autoconfigure.domain.EntityScan;
-
-import java.io.Serial;
-import java.io.Serializable;
-import java.time.ZonedDateTime;
-import java.util.*;
-
-@Getter
-public class User implements Serializable {
-
-  @Serial
-  private static final long serialVersionUID = 101L;
-  private final UUID id;
-  private final ZonedDateTime createdAt; // 객체 생성 시간
-  private ZonedDateTime updateAt;
-  //가입 채널 리스트
-  private final Set<UUID> belongChannels = new HashSet<>();
-  private String email;
-  private String password;
-  private UUID profileId;
-
-  // 이메일과 비밀번호
-  public User(String email, String password) {
-    this.id = UUID.randomUUID();
-    this.createdAt = ZonedDateTime.now(); // 생성시간
-    this.updateAt = null;
-    this.email = email;
-    this.password = password;
-  }
-
-  // 변경 시 호출
-  public void setUpdateAt() {
-    this.updateAt = ZonedDateTime.now();
-  }
-
-  // 채널 참여
-  public void addBelongChannel(UUID channelId) {
-    belongChannels.add(channelId);
-  }
-
-  // 채널 탈퇴
-  public void removeBelongChannel(UUID channelId) {
-    belongChannels.remove(channelId);
-  }
-
-  public void setEmail(String email) {
-    this.email = email;
-    setUpdateAt(); // 이메일 변경 시 업데이트 시간 갱신
-  }
-
-  // 비밀번호 변경 시
-  public void setPassword(String password) {
-    this.password = password;
-    setUpdateAt(); // 비밀번호 변경 시 업데이트 시간 갱신
-  }
-
-  //로그인
-  public boolean checkPassword(String inputPassword) {
-    return this.password != null && this.password.equals(inputPassword);
-  }
-
-  // 프로필 이미지 id만 가지면 됨
-  public void setProfileId(UUID profileId) {
-    this.profileId = profileId;
-    setUpdateAt(); // 프로필 이미지 변경 시 업데이트 시간 갱신
-  }
-}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/mapping/UserMapping.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/mapping/UserMapping.java b/src/main/java/com/sprint/mission/discodeit/mapping/UserMapping.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/mapping/UserMapping.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,31 +0,0 @@
-package com.sprint.mission.discodeit.mapping;
-
-import com.sprint.mission.discodeit.config.CentralMapperConfig;
-import com.sprint.mission.discodeit.dto.UserDto;
-import com.sprint.mission.discodeit.dto.UserDto.Summary;
-import com.sprint.mission.discodeit.entity.User;
-import com.sprint.mission.discodeit.entity.UserStatus;
-import org.mapstruct.*;
-import org.mapstruct.factory.Mappers;
-
-//유저의
-@Mapper(config = CentralMapperConfig.class)
-public interface UserMapping {
-
-  UserMapping INSTANCE = Mappers.getMapper(UserMapping.class);
-  // 엔티티 → 응답 DTO 변환
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  @Mapping(source = "user.id", target = "id")
-    // 필요한 다른 필드 매핑 추가
-  Summary userToSummary(User user, UserStatus userStatus);
-
-  UserDto.Response userToResponse(User user);
-
-  @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
-  void updateUserFromDto(UserDto.Update dto, @MappingTarget User user);
-
-  UserDto.Update userToDto(User user);
-
-
-}
Index: api-docs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api-docs.json b/api-docs.json
deleted file mode 100644
--- a/api-docs.json	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,1 +0,0 @@
-{"openapi":"3.0.1","info":{"title":"OpenAPI definition","version":"v0"},"servers":[{"url":"http://localhost:8080","description":"Generated server url"}],"paths":{"/user/update/{userId}":{"put":{"tags":["user-controller"],"operationId":"updateUser","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Update"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Update"}}}}}}},"/user/status/{userId}":{"put":{"tags":["user-controller"],"operationId":"updateUserStatus","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/StatusRequest"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/StatusResponse"}}}}}}},"/read-status/update/{readStatusId}":{"put":{"tags":["read-status-controller"],"operationId":"updateReceptionStatus","parameters":[{"name":"readStatusId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Update"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResponseReadStatus"}}}}}}},"/message/update/{messageId}":{"put":{"tags":["message-controller"],"operationId":"updateMessage","parameters":[{"name":"messageId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Update"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/channel/update/{channelId}":{"put":{"tags":["channel-controller"],"operationId":"updateChannel","parameters":[{"name":"channelId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Update"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/read-status/create":{"post":{"tags":["read-status-controller"],"operationId":"createReceptionStatus","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Create"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResponseReadStatus"}}}}}}},"/message/create":{"post":{"tags":["message-controller"],"operationId":"sendMessage","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Create"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/channel/public":{"post":{"tags":["channel-controller"],"operationId":"createPublicChannel","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePublic"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/channel/private":{"post":{"tags":["channel-controller"],"operationId":"createPrivateChannel","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePrivate"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/binary-contents":{"post":{"tags":["binary-content-controller"],"operationId":"uploadBinaryContent","parameters":[{"name":"ownerId","in":"query","required":true,"schema":{"type":"string","format":"uuid"}},{"name":"ownerType","in":"query","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"multipart/form-data":{"schema":{"required":["file"],"type":"object","properties":{"file":{"type":"string","format":"binary"}}}}}},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Summary"}}}}}}},"/auth/register":{"post":{"tags":["auth-controller"],"operationId":"registerUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Create"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"object"}}}}}}},"/auth/login":{"post":{"tags":["auth-controller"],"operationId":"login","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Login"}}},"required":true},"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"object"}}}}}}},"/user/finds":{"get":{"tags":["user-controller"],"operationId":"findAllUsers","responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Summary"}}}}}}}},"/user/find/{userId}":{"get":{"tags":["user-controller"],"operationId":"findUser","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Summary"}}}}}}},"/read-status/{userId}":{"get":{"tags":["read-status-controller"],"operationId":"getUserReceptionStatuses","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ResponseReadStatus"}}}}}}}},"/message/{messageId}":{"get":{"tags":["message-controller"],"operationId":"getMessage","parameters":[{"name":"messageId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/message/channel/{channelId}":{"get":{"tags":["message-controller"],"operationId":"getChannelMessages","parameters":[{"name":"channelId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/channel/{channelId}":{"get":{"tags":["channel-controller"],"operationId":"getChannel","parameters":[{"name":"channelId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/Response"}}}}}}},"/channel/find/{userId}":{"get":{"tags":["channel-controller"],"operationId":"getChannelsForUser","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Response"}}}}}}}},"/binary-contents/{contentId}":{"get":{"tags":["binary-content-controller"],"operationId":"downloadBinaryContent","parameters":[{"name":"contentId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"string","format":"binary"}}}}}}},"/binary-contents/summaries":{"get":{"tags":["binary-content-controller"],"operationId":"downloadBinaryContents","parameters":[{"name":"ids","in":"query","required":true,"schema":{"type":"array","items":{"type":"string","format":"uuid"}}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Summary"}}}}}}}},"/binary-contents/download-archive":{"get":{"tags":["binary-content-controller"],"operationId":"downloadFilesAsZip","parameters":[{"name":"ids","in":"query","required":true,"schema":{"type":"array","items":{"type":"string","format":"uuid"}}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK"}}}},"/user/delete/{userId}":{"delete":{"tags":["user-controller"],"operationId":"deleteUser","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/DeleteResponse"}}}}}}},"/message/delete/{messageId}":{"delete":{"tags":["message-controller"],"operationId":"deleteMessage","parameters":[{"name":"messageId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"string"}}}}}}},"/channel/delete/{channelId}":{"delete":{"tags":["channel-controller"],"operationId":"deleteChannel","parameters":[{"name":"channelId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/DeleteResponse"}}}}}}},"/binary-contents/delete/{ownerId}":{"delete":{"tags":["binary-content-controller"],"operationId":"deleteBinaryContentsByOwner","parameters":[{"name":"ownerId","in":"path","required":true,"schema":{"type":"string","format":"uuid"}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK"}}}},"/binary-contents/delete/{ids}":{"delete":{"tags":["binary-content-controller"],"operationId":"deleteBinaryContentsByIds","parameters":[{"name":"ids","in":"query","required":true,"schema":{"type":"array","items":{"type":"string","format":"uuid"}}}],"responses":{"500":{"description":"Internal Server Error","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"409":{"description":"Conflict","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ErrorResponse"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/DeleteResponse"}}}}}}}}},"components":{"schemas":{"ErrorResponse":{"type":"object","properties":{"error":{"type":"string"},"status":{"type":"integer","format":"int32"},"code":{"type":"string"},"message":{"type":"string"},"details":{"type":"object"},"timestamp":{"type":"string","format":"date-time"}}},"Update":{"required":["id","password"],"type":"object","properties":{"id":{"type":"string","format":"uuid"},"password":{"type":"string"},"profileImage":{"type":"string","format":"uuid"}}},"StatusRequest":{"required":["status"],"type":"object","properties":{"status":{"type":"string"}}},"StatusResponse":{"required":["status"],"type":"object","properties":{"id":{"type":"string","format":"uuid"},"status":{"type":"string","enum":["ONLINE","OFFLINE"]}}},"ResponseReadStatus":{"required":["channelId","id","lastReadMessageId","userId"],"type":"object","properties":{"id":{"type":"string","format":"uuid"},"channelId":{"type":"string","format":"uuid"},"userId":{"type":"string","format":"uuid"},"lastReadMessageId":{"type":"string","format":"uuid"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"}}},"Response":{"required":["authorId","channelId","id"],"type":"object","properties":{"id":{"type":"string","format":"uuid"},"channelId":{"type":"string","format":"uuid"},"authorId":{"type":"string","format":"uuid"},"message":{"type":"string"},"createdAt":{"type":"string","format":"date-time"},"updateAt":{"type":"string","format":"date-time"},"binaryContentIds":{"type":"array","items":{"type":"string","format":"uuid"}}}},"Create":{"required":["channelId","userId"],"type":"object","properties":{"channelId":{"type":"string","format":"uuid"},"userId":{"type":"string","format":"uuid"}}},"CreatePublic":{"required":["channelName","ownerId"],"type":"object","properties":{"ownerId":{"type":"string","format":"uuid"},"channelName":{"type":"string"},"description":{"type":"string"}}},"CreatePrivate":{"required":["channelName","ownerId","participantIds"],"type":"object","properties":{"ownerId":{"type":"string","format":"uuid"},"participantIds":{"uniqueItems":true,"type":"array","items":{"type":"string","format":"uuid"}},"channelName":{"type":"string"}}},"Summary":{"required":["contentType","fileName","id"],"type":"object","properties":{"id":{"type":"string","format":"uuid"},"fileName":{"type":"string"},"contentType":{"type":"string"}}},"Login":{"required":["email","password"],"type":"object","properties":{"email":{"type":"string"},"password":{"type":"string"}}},"DeleteResponse":{"required":["id","success"],"type":"object","properties":{"id":{"type":"string"},"success":{"type":"string"}}}}}}
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/service/UserStatusService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/service/UserStatusService.java b/src/main/java/com/sprint/mission/discodeit/service/UserStatusService.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/service/UserStatusService.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,15 +0,0 @@
-package com.sprint.mission.discodeit.service;
-
-import com.sprint.mission.discodeit.dto.StatusDto;
-
-import java.util.List;
-import java.util.UUID;
-
-public interface UserStatusService {
-    boolean createUserStatus(UUID statusDto);
-    StatusDto.StatusResponse updateUserStatus(UUID userId, StatusDto.StatusRequest statusDto);
-    List<StatusDto.Summary> findAllUsers();
-    StatusDto.Summary findById(UUID userId);
-    boolean deleteUserStatus(UUID userId);
-    void setUserOnline(UUID userId);
-}
Index: src/main/java/com/sprint/mission/discodeit/dto/common/TimeStamps.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/dto/common/TimeStamps.java b/src/main/java/com/sprint/mission/discodeit/dto/common/TimeStamps.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/dto/common/TimeStamps.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,12 +0,0 @@
-package com.sprint.mission.discodeit.dto.common;
-
-import jakarta.validation.constraints.NotBlank;
-import java.time.ZonedDateTime;
-
-public class TimeStamps {
-
-  @NotBlank
-  private ZonedDateTime createdAt;
-  @NotBlank
-  private ZonedDateTime updatedAt;
-}
Index: src/main/java/com/sprint/mission/discodeit/file/FileUserStatusRepositoryImpl.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/file/FileUserStatusRepositoryImpl.java b/src/main/java/com/sprint/mission/discodeit/file/FileUserStatusRepositoryImpl.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/file/FileUserStatusRepositoryImpl.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,113 +0,0 @@
-package com.sprint.mission.discodeit.file;
-
-import com.sprint.mission.discodeit.entity.UserStatus;
-import com.sprint.mission.discodeit.service.UserStatusRepository;
-import jakarta.annotation.PreDestroy;
-import org.springframework.stereotype.Repository;
-
-import java.io.*;
-import java.util.*;
-import java.util.stream.Collectors;
-
-@Repository("fileUserStatusRepositoryImpl")
-public class FileUserStatusRepositoryImpl implements UserStatusRepository {
-    private String dataDir;
-    private String userStatusDataFile;
-    
-    private final Map<UUID, UserStatus> userStatuses;
-
-    public FileUserStatusRepositoryImpl(String dataDir) {
-        this.dataDir = dataDir;
-        this.userStatusDataFile = "user_status.dat";
-        userStatuses = loadData();
-    }
-    
-    @SuppressWarnings("unchecked")
-    private Map<UUID, UserStatus> loadData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, userStatusDataFile);
-        System.out.println("사용자 상태 데이터 로드 경로: " + file.getAbsolutePath());
-        
-        if (file.exists()) {
-            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {
-                return (Map<UUID, UserStatus>) in.readObject();
-            } catch (IOException | ClassNotFoundException e) {
-                System.err.println("사용자 상태 데이터 로드 오류: " + e.getMessage());
-                return new HashMap<>();
-            }
-        }
-        
-        return new HashMap<>();
-    }
-    
-    private synchronized void saveData() {
-        File dir = new File(dataDir);
-        if (!dir.exists()) {
-            dir.mkdirs();
-        }
-        
-        File file = new File(dir, userStatusDataFile);
-        System.out.println("사용자 상태 데이터 저장 경로: " + file.getAbsolutePath());
-        
-        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file))) {
-            out.writeObject(userStatuses);
-        } catch (IOException e) {
-            System.err.println("사용자 상태 데이터 저장 오류: " + e.getMessage());
-            throw new RuntimeException("사용자 상태 데이터 저장 실패", e);
-        }
-    }
-    
-    @Override
-    public boolean register(UserStatus userStatus) {
-        userStatuses.put(userStatus.getId(), userStatus);
-        saveData();
-        return true;
-    }
-
-    @Override
-    public Optional<UserStatus> findById(UUID id) {
-        return Optional.ofNullable(userStatuses.get(id));
-    }
-    
-    @Override
-    public Optional<UserStatus> findByUserId(UUID userId) {
-        return userStatuses.values().stream()
-                .filter(userStatus -> userStatus.getUserId().equals(userId))
-                .findFirst();
-    }
-
-    @Override
-    public List<UserStatus> findAll() {
-        return new ArrayList<>(userStatuses.values());
-    }
-    
-    @Override
-    public boolean update(UserStatus userStatus) {
-        if (userStatuses.containsKey(userStatus.getId())) {
-            userStatuses.put(userStatus.getId(), userStatus);
-            saveData();
-            return true;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean delete(UUID id) {
-        boolean result = userStatuses.remove(id) != null;
-        if (result) {
-            saveData();
-        }
-        return result;
-    }
-
-    // 애플리케이션 종료 시 데이터 저장 보장
-    @PreDestroy
-    public void saveDataOnShutdown() {
-        System.out.println("애플리케이션 종료 - 사용자 상태 데이터 저장 중");
-        saveData();
-    }
-} 
\ No newline at end of file
Index: src/main/java/com/sprint/mission/discodeit/util/ChannelType.java
===================================================================
diff --git a/src/main/java/com/sprint/mission/discodeit/util/ChannelType.java b/src/main/java/com/sprint/mission/discodeit/util/ChannelType.java
deleted file mode 100644
--- a/src/main/java/com/sprint/mission/discodeit/util/ChannelType.java	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ /dev/null	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
@@ -1,5 +0,0 @@
-package com.sprint.mission.discodeit.util;
-
-public enum ChannelType {
-    PRIVATE,PUBLIC;
-}
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>distributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.12.1-bin.zip\r\nnetworkTimeout=10000\r\nvalidateDistributionUrl=true\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1744357222747)
@@ -1,6 +1,6 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
 networkTimeout=10000
 validateDistributionUrl=true
 zipStoreBase=GRADLE_USER_HOME
Index: HELP.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Getting Started\r\n\r\n### Reference Documentation\r\nFor further reference, please consider the following sections:\r\n\r\n* [Official Gradle documentation](https://docs.gradle.org)\r\n* [Spring Boot Gradle Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.3/gradle-plugin)\r\n* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.3/gradle-plugin/packaging-oci-image.html)\r\n\r\n### Additional Links\r\nThese additional references should also help you:\r\n\r\n* [Gradle Build Scans – insights for your project's build](https://scans.gradle.com#gradle)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HELP.md b/HELP.md
--- a/HELP.md	(revision e2d2c91d221dc0bab8695ca897dd402cc40b916b)
+++ b/HELP.md	(date 1744357038094)
@@ -4,8 +4,16 @@
 For further reference, please consider the following sections:
 
 * [Official Gradle documentation](https://docs.gradle.org)
-* [Spring Boot Gradle Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.3/gradle-plugin)
-* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.3/gradle-plugin/packaging-oci-image.html)
+* [Spring Boot Gradle Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.0/gradle-plugin)
+* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.0/gradle-plugin/packaging-oci-image.html)
+* [Spring Web](https://docs.spring.io/spring-boot/3.4.0/reference/web/servlet.html)
+
+### Guides
+The following guides illustrate how to use some features concretely:
+
+* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
+* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
+* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)
 
 ### Additional Links
 These additional references should also help you:
