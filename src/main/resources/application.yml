spring:
  flyway:
    enabled: true
    baseline-on-migrate: true
  config:
    import: optional:file:.env[.properties]
  profiles:
    active: dev
  servlet:
    multipart:
      max-file-size: 4MB
      max-request-size: 4MB
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        use_sql_comments: true
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false
    generate-ddl: false
  sql:
    init:
      mode: never
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: discodeit-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

logging:
  level:
    root: info

discodeit:
  storage:
    type: ${STORAGE_TYPE:local}  # local | s3 (기본값: local)
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600}

app:
  jwt:
    secret: ${JWT_SECRET_KEY}""
    access-token-expiration: ${ACCESS_TOKEN_EXPIRATION}
    refresh-token-expiration: ${REFRESH_TOKEN_EXPIRATION}
    issuer: ${ISSUER}

management:
  endpoints:
    web:
      exposure:
        include: health, metrics


