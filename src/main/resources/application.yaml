spring:
  application:
    name: discodeit
  profiles:
    active: dev
  config:
    import: optional:file:.env[.properties]
  boot:
    admin:
      client:
        instance:
          name: discodeit

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: discodeit-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

  data:
    redis:
      host: localhost
      port: 6379

logging:
  level:
    root: info
    org.hibernate.SQL: debug
    #    org.hibernate.type.descriptor.sql.BasicBinder: trace
    org.apache.kafka.clients.consumer.ConsumerConfig: warn


discodeit:
  storage:
    type: ${STORAGE_TYPE:local}  # local | s3 (기본값: local)
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600}

admin:
  email: admin@email.com
  username: admin
  password: admin1234

security:
  remember-me:
    key: RememberMeKey
    token-validity-seconds: 1814400 # 3주
  jwt:
    secret: mySecretKey12345678901234567890123456789012345678901234567890
    access-token-validity-seconds: 1800       # 30분
    refresh-token-validity-seconds: 1209600   # 14일
