version: "3.8"

networks:
  discodeit-network:
    driver: bridge

services:
  # NGINX 리버스 프록시 컨테이너
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: discodeit-nginx
    ports:
      - "3000:3000"
    depends_on:
      - app
    networks:
      - discodeit-network
    volumes:
      - ./src/main/resources/static:/usr/share/nginx/html:ro

  # 백엔드 애플리케이션
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: discodeit-app
    # 외부 포트 노출 제거 (NGINX를 통해서만 접근)
    expose:
      - "80"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      JVM_OPTS: ${JVM_OPTS}

      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092

      # Security Configuration
      SECURITY_JWT_SECRET: ${SECURITY_JWT_SECRET}
      SECURITY_JWT_ACCESS_TOKEN_VALIDITY_SECONDS: ${SECURITY_JWT_ACCESS_TOKEN_VALIDITY_SECONDS}
      SECURITY_JWT_REFRESH_TOKEN_VALIDITY_SECONDS: ${SECURITY_JWT_REFRESH_TOKEN_VALIDITY_SECONDS}
      SECURITY_REMEMBER_ME_KEY: ${SECURITY_REMEMBER_ME_KEY}
      SECURITY_REMEMBER_ME_TOKEN_VALIDITY_SECONDS: ${SECURITY_REMEMBER_ME_TOKEN_VALIDITY_SECONDS}

      # Admin Configuration
      DISCODEIT_ADMIN_USERNAME: ${DISCODEIT_ADMIN_USERNAME}
      DISCODEIT_ADMIN_EMAIL: ${DISCODEIT_ADMIN_EMAIL}
      DISCODEIT_ADMIN_PASSWORD: ${DISCODEIT_ADMIN_PASSWORD}

      STORAGE_TYPE: ${STORAGE_TYPE}

      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_PRESIGNED_URL_EXPIRATION: ${AWS_S3_PRESIGNED_URL_EXPIRATION:-600}
    depends_on:
      - db
      - redis
      - broker
    volumes:
      - binary-content:/app/storage
    networks:
      - discodeit-network

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15
    container_name: discodeit-db
    # DataGrip 접근을 위한 포트 노출
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    networks:
      - discodeit-network

  # Apache Kafka 메시지 브로커
  broker:
    image: apache/kafka:4.0.0
    hostname: broker
    container_name: broker
    # 외부 포트 노출 제거 (Docker 명령어로 접근)
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - discodeit-network

  # Redis 메모리 데이터베이스
  redis:
    image: redis:7.2-alpine
    container_name: redis
    # DataGrip 접근을 위한 포트 노출
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - discodeit-network

volumes:
  pgdata:
  binary-content:
  redis-data: