version: '3.8'

services:
  nginx:
    image: nginx:1.28.0
    container_name: reverse-proxy
    depends_on:
      - backend
    ports:
      - "3000:80" # 외부 요청은 3000번 포트로 받음
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일 마운트
      #      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./src/main/resources/static:/usr/share/nginx/html:ro # 프론트엔드 빌드 결과물 마운트
    networks:
      - discodeit-network
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      - redis
      - broker
    #    ports:
    #      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SERVER_PORT=80
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - binary-content-storage:/app/.discodeit/storage
      - h2-data:/root/
    networks:
      - discodeit-network
  broker:
    image: apache/kafka:4.0.0
    hostname: broker
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - discodeit-network
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - discodeit-network
volumes:
  binary-content-storage:
  redis-data:
  h2-data:

networks:
  discodeit-network:
    driver: bridge