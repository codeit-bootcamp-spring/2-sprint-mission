version: "3.8"

services:
  # 리버스 프록시 -> 정적 리소스 서빙 및 API 요청 프록시
  nginx:
    image: nginx:1.25
    container_name: discodeit-nginx
    depends_on:
      - app
    ports:
      - "3000:80"  # 외부에서 접근 가능한 유일한 포트
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # 커스텀 Nginx 설정파일을 컨테이너 내부 설정 위치로 복사
      - ./build/resources/main/static:/usr/share/nginx/html:ro # 프론트엔드 정적 리소스를 Nginx가 직접 서빙할 수 있도록 복사
    networks:
      - discodeit-network

  # 백엔드 어플리케이션
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: discodeit-app
    expose:
      - "8080"  # nginx가 접근할 내부 포트 (외부 노출 X)
    depends_on:
      - postgres
      - redis
      - broker
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - PROJECT_NAME=${PROJECT_NAME}
      - PROJECT_VERSION=${PROJECT_VERSION}
      - JVM_OPTS=${JVM_OPTS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - STORAGE_TYPE=${STORAGE_TYPE}
      - AWS_S3_ACCESS_KEY=${AWS_S3_ACCESS_KEY}
      - AWS_S3_SECRET_KEY=${AWS_S3_SECRET_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_PRESIGNED_URL_EXPIRATION=${AWS_S3_PRESIGNED_URL_EXPIRATION}
    volumes:
      - binary-content:/app/uploads
    networks:
      - discodeit-network

  postgres:
    image: postgres:15
    container_name: discodeit-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - pgdata:/var/lib/postgresql/data
    networks:
      - discodeit-network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - discodeit-network

  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - discodeit-network

volumes:
  binary-content:
  pgdata:
  redis-data:

networks:
  discodeit-network:
