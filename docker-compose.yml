services:
  # 1. Nginx 리버스 프록시 (새로 추가된 문지기)
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    container_name: discodeit-proxy
    ports:
      - "3000:3000" # 외부의 3000번 포트와 Nginx 컨테이너의 3000번 포트를 연결
    depends_on:
      - backend    # backend 서비스가 먼저 실행된 후에 실행
    networks:
      - discodeit-network

  # 2. Spring Boot 백엔드 서버 (app -> backend로 이름 변경 및 ports 삭제)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: discodeit-backend
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/discodeit
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - STORAGE_TYPE=s3
      - STORAGE_LOCAL_ROOT_PATH=.discodeit/storage
      - AWS_S3_ACCESS_KEY=${AWS_S3_ACCESS_KEY}
      - AWS_S3_SECRET_KEY=${AWS_S3_SECRET_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_PRESIGNED_URL_EXPIRATION=600
      - DISCODEIT_ADMIN_USERNAME=${DISCODEIT_ADMIN_USERNAME}
      - DISCODEIT_ADMIN_EMAIL=${DISCODEIT_ADMIN_EMAIL}
      - DISCODEIT_ADMIN_PASSWORD=${DISCODEIT_ADMIN_PASSWORD}
      - SECURITY_REMEMBER_ME_KEY=${SECURITY_REMEMBER_ME_KEY}
      - SECURITY_REMEMBER_ME_TOKEN_VALIDITY_SECONDS=${SECURITY_REMEMBER_ME_TOKEN_VALIDITY_SECONDS}
      - SECURITY_JWT_SECRET=${SECURITY_JWT_SECRET}
      - SECURITY_JWT_ACCESS_TOKEN_VALIDITY_SECONDS=${SECURITY_JWT_ACCESS_TOKEN_VALIDITY_SECONDS}
      - SECURITY_JWT_REFRESH_TOKEN_VALIDITY_SECONDS=${SECURITY_JWT_REFRESH_TOKEN_VALIDITY_SECONDS}
    depends_on:
      - db
      - redis
      - broker
    volumes:
      - binary-content-storage:/app/.discodeit/storage
    networks:
      - discodeit-network

  # 3. 데이터베이스 (기존과 동일)
  db:
    image: postgres:16-alpine
    container_name: discodeit-db
    environment:
      - POSTGRES_DB=discodeit
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - discodeit-network

  # 4. Kafka 메시지 브로커 (기존과 동일)
  broker:
    image: apache/kafka:latest # kafka 버전을 latest로 변경
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - discodeit-network

  # 5. Redis 메모리 DB (기존과 동일)
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - discodeit-network

volumes:
  postgres-data:
  binary-content-storage:
  redis-data:

networks:
  discodeit-network:
    driver: bridge