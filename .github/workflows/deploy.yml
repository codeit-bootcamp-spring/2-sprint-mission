name: AWS build

on:
  workflow_dispatch:
  push:
    branches:
      - part3-강지훈-sprint8

jobs:
  build_and_AWS-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
      #          ./gradlew test

      - name: Build Docker image
        run: docker build -t discodeitp-app:latest .

      - name: Set environment variables
        run: |
          echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Tag Docker image
        run: |
          docker tag discodeitp-app:latest ${{ vars.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
          docker tag discodeitp-app:latest ${{ vars.ECR_REPOSITORY_URI }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Push Docker image to ECR
        run: |
          docker push ${{ vars.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
          docker push ${{ vars.ECR_REPOSITORY_URI }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} --query taskDefinition > ${{ vars.ECS_TASK_DEFINITION }}.json

      - name: Update task definition with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ vars.ECS_TASK_DEFINITION }}.json
          container-name: discodeit-app
          image: ${{ vars.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Update ECS Service(Stop)
        run: aws ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_SERVICE }} --desired-count 0

      - name: Wait until ECS service is fully stopped
        run: |
          while true; do
            TASKS=$(aws ecs describe-services \
              --cluster ${{ vars.ECS_CLUSTER }} \
              --services ${{ vars.ECS_SERVICE }} \
              --query "services[0].runningCount" --output text)

            echo "Running task count: $TASKS"

            if [ "$TASKS" -eq "0" ]; then
              echo "All tasks stopped."
              break
            fi
            sleep 5
          done

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Update ECS Service(Start)
        run: aws ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_SERVICE }} --desired-count 1

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ vars.ECS_CLUSTER }} --services ${{ vars.ECS_SERVICE }} --query 'services[0].status' --output text)
          
          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "Deployment successful! Service is active."
          else
            echo "Deployment may have issues. Service status: $SERVICE_STATUS"
            exit 1
          fi


