name: Deploy to ECS

on:
    push:
        branches:
            - release

env:
    AWS_REGION: ${{ vars.AWS_REGION }}
    ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
    ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
    ECS_SERVICE: ${{ vars.ECS_SERVICE }}
    ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

jobs:
    build-and-push:
        name: Build and Push Docker Image to Public ECR
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout source code
                uses: actions/checkout@v3

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v2
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
                    aws-region: ${{ env.AWS_REGION }}

            -   name: Login to Amazon ECR Public
                run: |
                    aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

            -   name: Build and tag Docker image
                run: |
                    IMAGE_TAG=latest
                    COMMIT_HASH=${{ github.sha }}
                    docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
                    docker tag $ECR_REPOSITORY_URI:$IMAGE_TAG $ECR_REPOSITORY_URI:$COMMIT_HASH

            -   name: Push Docker images
                run: |
                    docker push $ECR_REPOSITORY_URI:latest
                    docker push $ECR_REPOSITORY_URI:${{ github.sha }}

    deploy:
        name: Deploy to ECS
        needs: build-and-push
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v3

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v2
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
                    aws-region: ${{ env.AWS_REGION }}

            -   name: Get current task definition
                id: get-task-def
                run: |
                    aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION > task-def.json

            -   name: Update task definition with new image
                id: update-task-def
                run: |
                    IMAGE_URI="$ECR_REPOSITORY_URI:${{ github.sha }}"
                    NEW_TASK_DEF=$(jq --arg IMAGE "$IMAGE_URI" '.taskDefinition.containerDefinitions[0].image = $IMAGE | {family: .taskDefinition.family, containerDefinitions: [.taskDefinition.containerDefinitions[0]], requiresCompatibilities: .taskDefinition.requiresCompatibilities, networkMode: .taskDefinition.networkMode, cpu: .taskDefinition.cpu, memory: .taskDefinition.memory, executionRoleArn: .taskDefinition.executionRoleArn, taskRoleArn: .taskDefinition.taskRoleArn}' task-def.json)
                    echo "$NEW_TASK_DEF" > new-task-def.json
                    TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
                    echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

            -   name: Scale down old ECS service
                run: |
                    aws ecs update-service \
                      --cluster $ECS_CLUSTER \
                      --service $ECS_SERVICE \
                      --desired-count 0

            -   name: Update ECS service to use new task definition
                run: |
                    aws ecs update-service \
                      --cluster $ECS_CLUSTER \
                      --service $ECS_SERVICE \
                      --task-definition ${{ env.TASK_DEF_ARN }} \
                      --desired-count 1
