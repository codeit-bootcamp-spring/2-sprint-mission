name: CD - Deploy to AWS ECS

on:
  push:
    branches:
      - release

env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/checkout@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Convert gradlew to Unix line endings
        run: |
          sudo apt-get update
          sudo apt-get install -y dos2unix
          dos2unix gradlew

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Set environment variables
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=discodeit" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build \
          -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
          -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
          .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition discodeit-task --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: discodeit-app
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          environment-variables: |
            SPRING_PROFILES_ACTIVE=dev
            HELLO=world

      - name: Scale ECS Service to zero
        run: |
          aws ecs update-service \
          --cluster discodeit-cluster \
          --service discodeit-service \
          --desired-count 0

      - name: Scale ECS Service to 1
        run: |
          aws ecs update-service \
          --cluster ${{ vars.ECS_CLUSTER }}\
          --service ${{ vars.ECS_SERVICE }}\
          --desired-count 1

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          cluster: discodeit-cluster
          service: discodeit-service
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          SERVICE_STATUS=$(aws ecs describe-services --cluster discodeit-cluster --services discodeit-service --query 'services[0].status' --output text)

          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "Deployment successful! Service is active."
          else
            echo "Deployment may have issues. Service status: $SERVICE_STATUS"
            exit 1
          fi